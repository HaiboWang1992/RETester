original bug report url,original tool,faulty target tool,Version,JDK version,Refactoring Type,Input program,Expected output prgram,Actual output program,Procedure,Symptom,submitted,state
https://bugs.eclipse.org/bugs/show_bug.cgi?id=532996,Eclipse,IDEA,"IntelliJ IDEA 2024.1.1 (Ultimate Edition)
Build #IU-241.15989.150, built on April 29, 2024
Runtime version: 17.0.10+1-b1207.14 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o",Oracle OpenJDK 17.0.8,Rename Class,"public class A {
}
public class B {
    public static void main(String[] args) {
        var aa = new A();
    }
}","public class C {
}
public class B {
    public static void main(String[] args) {
        var aa = new C();
    }
}","public class A {
}
public class B {
    public static void main(String[] args) {
        var aa = new A();
    }
}","Put the cursor on the var, Refactor-rename. There are two problems:
1. The cursor focus should be moved to the A(), but actually not;
2. After manually move cursor to the A() and type new class name for the class then press enter, 
nothing changed. Class A should be changed to the typed new class name.",Fail to refactoring,https://youtrack.jetbrains.com/issue/IDEA-353991/Fail-to-rename-class,pending
https://bugs.eclipse.org/bugs/show_bug.cgi?id=407985,Eclipse,IDEA,"IntelliJ IDEA 2024.1.1 (Ultimate Edition)
Build #IU-241.15989.150, built on April 29, 2024
Runtime version: 17.0.10+1-b1207.14 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o",Oracle OpenJDK 17.0.8,Extract Method,"public class A {

    void foo(int value) {
        class Local {
            void bar() {
                Runnable runnable = () -> {
                    System.out.println(value);
                };
            }
        }
    }
}","public class A {
    void foo(int value) {
        class Local {
            void bar() {
                Runnable runnable = () -> {
                    extracted(value);
                };
            }

			private void extracted(int value) {
				System.out.println(value);
			}
        }
    }
}","public class A {

    void foo(int value) {
        class Local {
            void bar() {
                Runnable runnable = () -> {
                    extracted();
                };
            }

            private static void extracted() {
                System.out.println(value);
            }
        }
    }
}",if the Extract method refactoring is applied to the body of the lambda expression assigned to runnable and class Local is chosen as the destination of the new method,Compile error,https://youtrack.jetbrains.com/issue/IDEA-354122/Extract-Method-refactoring-produces-refactored-program-contains-syntax-error,fixed
https://github.com/eclipse-jdt/eclipse.jdt.ui/issues/1083,Eclipse,IDEA,"IntelliJ IDEA 2024.1.1 (Ultimate Edition)
Build #IU-241.15989.150, built on April 29, 2024
Runtime version: 17.0.10+1-b1207.14 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o",Oracle OpenJDK 17.0.8,Make Static,"public class Foo {

    private int counter;

    public Foo(int initialCounter) {
        this.counter = initialCounter;
    }

    void toBeRefactored() {
        new Foo(counter + 10) {
            void toImplement() {
                toCall();
            }
        }.toImplement();
    }

    void toCall() {
        System.out.println(""Counter: "" + counter);
    }

    public static void main(String[] args) {
        Foo foo = new Foo(5);
        foo.toBeRefactored();
    }
}","public class Foo {

    private int counter;

    public Foo(int initialCounter) {
        this.counter = initialCounter;
    }

    static void toBeRefactored(Foo foo) {
        new Foo(foo.counter + 10) {
            void toImplement() {
                toCall();
            }
        }.toImplement();
    }

    void toCall() {
        System.out.println(""Counter: "" + counter);
    }

    public static void main(String[] args) {
        Foo foo = new Foo(5);
        Foo.toBeRefactored(foo);
    }
}","public class Foo {

    private int counter;

    public Foo(int initialCounter) {
        this.counter = initialCounter;
    }

    static void toBeRefactored(final Foo foo) {
        new Foo(foo.counter + 10) {
            void toImplement() {
                foo.toCall();
            }
        }.toImplement();
    }

    void toCall() {
        System.out.println(""Counter: "" + counter);
    }

    public static void main(String[] args) {
        Foo foo = new Foo(5);
        Foo.toBeRefactored(foo);
    }
}","make static for the method toBeRefactored,
the ouput is different before and after",behavior change,https://youtrack.jetbrains.com/issue/IDEA-354116/Make-Static-refactoring-erroneously-changes-the-behavior-of-my-program,confirmed
https://youtrack.jetbrains.com/issue/IDEA-331198/Exception-upon-Extract-method-on-String-template,IDEA,Eclipse,"Eclipse IDE for Enterprise Java and Web Developers (includes Incubating components)

Version: 2024-03 (4.31.0)
Build id: 20240307-1437",Oracle OpenJDK 22.0.1,extract method,"import static java.lang.StringTemplate.STR;

public class A {
    public static void main(String[] args) {
        foobar(args);
    }

    public static String foobar(String[] args) {
        return args.length == 0 ? ""zero length"" : STR.""\{args[0]}"" ;
    }
}","import static java.lang.StringTemplate.STR;

public class A {
    public static void main(String[] args) {
        foobar(args);
    }

    public static String foobar(String[] args) {
        return args.length == 0 ? ""zero length"" : getString(args);
    }

    private static String getString(String[] args) {
        return STR.""\{args[0]}"";
    }
}",a warning,"Steps: 
put carret on STR
call ""Extract method"" refactoring
Select STR.""\{args[0]}""
Expected: 
expression moved to separate method",fail to refactoring,,
https://youtrack.jetbrains.com/issue/IDEA-133095/Extract-method-refactoring-produces-incorrect-code,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,extract method,"public class A {
    interface I {
        String foo();
    }
    public void foo(int ii) {
        I r = () -> {
            return ""42"";
        };
    }
}","public class A {
    interface I {
        String foo();
    }
    public void foo(int ii) {
        I r = () -> {
            return extracted();
        };
    }
	private String extracted() {
		return ""42"";
	}
}","public class A {
    interface I {
        String foo();
    }
    public void foo(int ii) {
        I r = () -> {
            qq();
        };
    }

    private void qq() {
        return ""42"";
    }
}","perform introduce method refactoring for ""return ""42"";""",compile error,,
https://youtrack.jetbrains.com/issue/IDEA-332489/Inlining-refactoring-operation-leads-to-naming-conflicts,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,inline method,"class A {
	public void main() {
            class T {
                    public T() {}
            }
            foo();
	}
	
	public void foo() {
		class T {
			T t;
			public T() {}
		}
	}
}",,"class A {
	public void main() {
            class T {
                    public T() {}
            }

        class T {

            T t;

            public T() {
            }
        }
	}
	
}",perform inline method refactoring on method foo(),compile error,,
https://youtrack.jetbrains.com/issue/IDEA-314882/Inline-method-adds-unnecessary-parentheses-when-inlining-a-string-concatenation-into-a-string-concatenation,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,inline method,"class A {
    String middle() {
        return ""middle1"" + ""middle2"";
    }

    String x() {
        return ""start"" + middle() + ""end"";
    }

}","class A {
    String x() {
        return ""start"" + ""middle1"" + ""middle2"" + ""end"";
    }
}","class A {

    String x() {
        return ""start"" + (""middle1"" + ""middle2"") + ""end"";
    }
	
}",perform inline method refactoring on method middle(),redundant change,,
https://youtrack.jetbrains.com/issue/IDEA-145512/Missing-import-after-inline-method,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,inline method,"import java.util.HashMap;
import java.util.Map.Entry;
import java.util.Set;
import static java.util.stream.Collectors.toMap;

class A {
    public static void filterMap() {
        new HashMap<Long, Set<Integer>>()
                .entrySet()
                .stream()
                .collect(toMap(Entry::getKey, Entry::getValue));
    }

}
public class B{
    public static void main(String[] args) {
        A.filterMap();
    }
}","import static java.util.stream.Collectors.toMap;

import java.util.HashMap;
import java.util.Map.Entry;
import java.util.Set;

public class B {
    public static void main(String[] args) {
        new HashMap<Long, Set<Integer>>()
		.entrySet()
		.stream()
		.collect(toMap(Entry::getKey, Entry::getValue));
    }
}",error message,perform inline method refactoring on method A.filterMap(); in class B,fail to refactoring,,
https://youtrack.jetbrains.com/issue/IDEA-145795/Inline-method-refactoring-can-change-behavior.,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,inline method,"class A {
    public static void main(String[] args) {
        int x = 2;
        System.out.println(getString(x + 2, "" suffix""));
    }

    private static String getString(int number, String suffix) {
        return ""prefix "" + number + suffix;
    }
}","class A {
    public static void main(String[] args) {
        int x = 2;
        System.out.println(""prefix "" + (x + 2) + "" suffix"");
    }

}","class A {
    public static void main(String[] args) {
        int x = 2;
        System.out.println(""prefix "" + x + 2 + "" suffix"");
    }

}",perform inline method refactoring on method getString(),behavior change,,
https://youtrack.jetbrains.com/issue/IDEA-96962/Inline-method-to-super-constructor-call-break-code,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,inline method,"public class B{
    public B(String x) {
    }
}
class A extends B {
    public A(String x) {
        super(test(x));
    }

    private static String test(String x) {
        String y = x.trim();
        return y.length() > 0 ? y : ""aaaa"";
    }
}",-,"class A extends B {
    public A(String x) {
        String y = x.trim();
        super(y.length() > 0 ? y : ""aaaa"");
    }

}",perform inline method refactoring on method test(),compile error,,
https://youtrack.jetbrains.com/issue/IDEA-96962/Inline-method-to-super-constructor-call-break-code,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,inline method,"class A{
    void bar() {}
}
public class B extends A {
    void foo() {
        super.bar();
    }

    static void err(B b) {
        b.foo(); //inline call to foo()
    }
}",warning message,"public class B extends A {

    static void err(B b) {
        super.bar(); 
    }
}",inline method refactoring on b.foo(),compile error,,
https://youtrack.jetbrains.com/issue/IDEA-96962/Inline-method-to-super-constructor-call-break-code,IDEA,Eclipse,"Eclipse IDE for Enterprise Java and Web Developers (includes Incubating components)

Version: 2024-03 (4.31.0)
Build id: 20240307-1437",Oracle OpenJDK 22.0.1,inline method,"class A{
    void bar() {}
}
public class B extends A {
    void foo() {
        super.bar();
    }

    static void err(B b) {
        b.foo(); //inline call to foo()
    }
}",warning message,"public class B extends A {

    static void err(B b) {
        super.bar(); 
    }
}",inline method refactoring on b.foo(),compile error,https://github.com/eclipse-jdt/eclipse.jdt.ui/issues/1529,pending
https://youtrack.jetbrains.com/issue/IDEA-152181/Inline-method-tries-to-inline-private-field,IDEA,Eclipse,"Eclipse IDE for Enterprise Java and Web Developers (includes Incubating components)

Version: 2024-03 (4.31.0)
Build id: 20240307-1437",Oracle OpenJDK 22.0.1,inline method,"public class A {
    private Integer i = 0;

    void foo() {
        i.toString();
    }
}
public class B extends A {
    void bar() {
        foo(); // inline foo
    }
}",warning message,"public class B extends A {
    void bar() {
        i.toString(); // inline foo
    }
}",inline method refactoring on foo() in class B method bar(),compile error,,
https://youtrack.jetbrains.com/issue/IDEA-152181/Inline-method-tries-to-inline-private-field,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,inline method,"public class A {
    private Integer i = 0;

    void foo() {
        i.toString();
    }
}
public class B extends A {
    void bar() {
        foo(); // inline foo
    }
}",warning message,"public class B extends A {
    void bar() {
        i.toString(); // inline foo
    }
}",inline method refactoring on foo() in class B method bar(),compile error,,
https://youtrack.jetbrains.com/issue/IDEA-340915/Bug-Extract-local-variables-causes-syntax-errors,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,extract variable,"public class A {
    public void f() {
    }
}
public class B extends A {
    public void c() {
        super.f(); //select `super` and extract variable
    }
}",warning message,"public class B extends A {
    public void c() {
        final A aSuper = super;
        aSuper.f(); //select `super` and extract variable
    }
}",select `super` in class B method c() and extract variable,compile error,,
https://youtrack.jetbrains.com/issue/IDEA-309095/Improve-the-Safety-of-Introduce-Variable-Refactorings-concening-ClassCasts,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,extract variable,"public class A {
    public static void main( String[] args ) {
        foo(new Float(3.5));
    }
    
    public static void foo(Object obj) {
        if (obj instanceof Integer && ((Integer) obj).intValue() > 0) {
            System.out.println(((Integer) obj).intValue());
        } else if (obj instanceof Float && ((Float) obj).floatValue() > 0.0) {
            System.out.println(((Float) obj).floatValue());
        }
    }
}",-,"public class A {
    public static void main( String[] args ) {
        foo(new Float(3.5));
    }
    
    public static void foo(Object obj) {
        final int intValue = ((Integer) obj).intValue();
        if (obj instanceof Integer && intValue > 0) {
            System.out.println(intValue);
        } else if (obj instanceof Float && ((Float) obj).floatValue() > 0.0) {
            System.out.println(((Float) obj).floatValue());
        }
    }
}","select the expression ((Integer)obj).intValue(), 
and conduct refactoring ""extract local variable"".
Running the refactored program has syntax error.",behavior change,,
https://youtrack.jetbrains.com/issue/IDEA-124349/Extract-Parameter-refactoring-fails-for-nested-calls,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Introduce Parameter,"public class A {
    private void test() {
        TestSubject subject = new TestSubject();
        boolean flag = false;

        if (subject.getSubject2().getVal() != flag) {
            System.out.println(subject.getSubject2().getVal());
        }
    }

    public static class TestSubject {
        public TestSubject2 getSubject2() {
            return new TestSubject2();
        }
    }

    public static class TestSubject2 {
        public boolean getVal() {
            return true;
        }
    }
}",-,"public class A {
    private void test() {
        test(subject.getSubject2().getVal());
    }

    private void test(boolean val) {
        TestSubject subject = new TestSubject();
        boolean flag = false;
        if (val != flag) {
            System.out.println(val);
        }
    }

    public static class TestSubject {
        public TestSubject2 getSubject2() {
            return new TestSubject2();
        }
    }

    public static class TestSubject2 {
        public boolean getVal() {
            return true;
        }
    }
}","1. Select ""subject.getSubject2().getVal()"" from the if-statement
2. Use Extract Parameter refactoring
3. Select ""Replace all occurences""",compile error,,
https://youtrack.jetbrains.com/issue/IDEA-142361/Extract-Variable-in-lambda-expression-fails,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Introduc Variable,"public class A {
    public void doTest() {
        String text = ""xxx"";
        Runnable runnable = () -> A.this.toVoid(text.length() - 1);
    }

    private void toVoid(Object o) {
    }
}","public class A {
    public void doTest() {
        String text = ""xxx"";
        Runnable runnable = () -> {
                        int o = text.length() - 1;
                        A.this.toVoid(o);
                };
    }

    private void toVoid(Object o) {
    }
}","public class A {
    public void doTest() {
        String text = ""xxx"";
        Runnable runnable = () -> A.this.toVoid(name);
    }

    private void toVoid(Object o) {
    }
}","extracting variable for ""text.length() - 1""",compile error,,
https://youtrack.jetbrains.com/issue/IDEA-142361/Extract-Variable-in-lambda-expression-fails,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Introduc Variable,"import java.lang.reflect.Method;
import java.util.Collection;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class A {
    public void foo(Class<?> cls)
    {
        Stream.of(cls.getMethods())
                .filter(method ->
                        Collection.class.isAssignableFrom(
                                method.getReturnType())
                                || Map.class.isAssignableFrom(method.getReturnType()))
                .collect(Collectors.<Method>toList());
    }
}","import java.lang.reflect.Method;
import java.util.Collection;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class A {
    public void foo(Class<?> cls)
    {
        Stream.of(cls.getMethods())
                .filter(method ->
                        {
							Class<?> returnType = method.getReturnType();
							return Collection.class.isAssignableFrom(
							        returnType)
							        || Map.class.isAssignableFrom(returnType);
						})
                .collect(Collectors.<Method>toList());
    }
}","import java.lang.reflect.Method;
import java.util.Collection;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class A {
    public void foo(Class<?> cls)
    {
        Stream.of(cls.getMethods())
                .filter(method ->
                        Collection.class.isAssignableFrom(returnType)
                                || Map.class.isAssignableFrom(returnType))
                .collect(Collectors.<Method>toList());
    }
}",extract method.getReturnType() and have it replace both occurrences,compile error,,
https://youtrack.jetbrains.com/issue/IDEA-135083/Extract-variable-from-expression-lambda-and-changing-name-breaks-code,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Introduc Variable,"public class A {
    void foo() {
        Runnable r = () -> System.out.println(""extract me"");
    }
}","public class A {
    void foo() {
        Runnable r = () -> {
			String x = ""extract me"";
			System.out.println(x);
		};
    }
}","public class A {
    void foo() {
        Runnable r = () -> System.out.println(x);
    }
}",extract the string constant from the following code,compile error,,
https://youtrack.jetbrains.com/issue/IDEA-135083/Extract-variable-from-expression-lambda-and-changing-name-breaks-code,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Introduc Variable,"import java.io.FileFilter;

public class A {
    public void foo() {
        FileFilter java = f -> f.getName().endsWith("".java"");
    }
}","import java.io.FileFilter;

public class A {
    public void foo() {
        FileFilter java = f -> {
			boolean endsWith = f.getName().endsWith("".java"");
			return endsWith;
		};
    }
}","import java.io.FileFilter;

public class A {
    public void foo() {
        FileFilter java = f -> endsWith;
    }
}","Extract a variable from f.getName().endsWith("".java"")",compile error,,
https://youtrack.jetbrains.com/issue/IDEA-88758/Dont-extract-variable-where-its-impossible,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Introduc Variable,"public class A {
    public void foo(int[] ints) {
        int length = 10;
        for (int i = 0; i < length && ints[i] > 0; i++) {
            System.out.println(ints[i]);
            System.out.println(ints[i]);
            System.out.println(ints[i]);
        }
    }
}","public class A {
    public void foo(int[] ints) {
        int length = 10;
        for (int i = 0; i < length && ints[i] > 0; i++) {
            int x = ints[i];
			System.out.println(x);
            System.out.println(x);
            System.out.println(x);
        }
    }
}","public class A {
    public void foo(int[] ints) {
        int length = 10;
        final int x = ints[i];
        for (int i = 0; i < length && x > 0; i++) {
            System.out.println(x);
            System.out.println(x);
            System.out.println(x);
        }
    }
}",introduce variable for ints[i] and replace all occurances,compile error,,
https://youtrack.jetbrains.com/issue/IDEA-82103/Move-Method-breaks-code,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Move Method,"public class A {
    B b = new B();

    void beep() {}

    public static void main(String[] args) {
        A flim = new A();
        flim.beep();
    }
}
public class B {
}","public class A {
    B b = new B();

    public static void main(String[] args) {
        A flim = new A();
        flim.b.beep();
    }
}
public class B {

        void beep() {}

}","public class A {
    B b = new B();


    public static void main(String[] args) {
        A flim = new A();
        b.beep();
    }
}
public class B {

    void beep() {
    }
}",move refactoring for method beep() in Class A,compile error,,
https://youtrack.jetbrains.com/issue/IDEA-88471/Move-instance-method-can-generate-bad-code-when-moving-to-an-interface,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Move Method,"public class A {
    private MyInterface myInterface;

    public void doSomething() {
    }

    public void callDoSomething() {
        doSomething();
    }
}
public interface MyInterface {

}
public class B implements MyInterface{

}","public class A {
    private MyInterface myInterface;

    public void callDoSomething() {
        myInterface.doSomething();
    }
}
public interface MyInterface {

	default void doSomething() {
	}

}
public class B implements MyInterface{

}","public class A {
    private MyInterface myInterface;


    public void callDoSomething() {
        myInterface.doSomething();
    }
}
public interface MyInterface {

    public void doSomething() {
    }
    
}
public class B implements MyInterface{

}",move refactoring for method doSomething() in Class A to Interface MyInterface,compile error,,
https://youtrack.jetbrains.com/issue/IDEA-155147/move-method-breaks-method-reference-and-results-in-compile-error,IDEA,Eclipse,"Eclipse IDE for Enterprise Java and Web Developers (includes Incubating components)

Version: 2024-03 (4.31.0)
Build id: 20240307-1437
",Oracle OpenJDK 22.0.1,Move Method,"import java.util.ArrayList;

import static java.util.stream.Collectors.toList;

public class A {
    private static class Destination{ }

    private final Destination destination = new Destination();

    public void main(){
        new ArrayList<String>().stream().filter(this::notNull).collect(toList());
    }

    private boolean notNull(String it) {
        return it != null;
    }
}","import java.util.ArrayList;

import static java.util.stream.Collectors.toList;

public class A {
    private static class Destination{
        private boolean notNull(String it) {
            return it != null;
        }
    }

    private final Destination destination = new Destination();

    public void main(){
        new ArrayList<String>().stream().filter(destination::notNull).collect(toList());
    }

}","import java.util.ArrayList;

import static java.util.stream.Collectors.toList;

public class A {
    private static class Destination{

                boolean notNull(String it) {
                    return it != null;
                } }

    private final Destination destination = new Destination();

    public void main(){
        new ArrayList<String>().stream().filter(this::notNull).collect(toList());
    }
}",move refactoring for method notNull(),compile error,,
https://youtrack.jetbrains.com/issue/IDEA-151440/No-Move-Members-refactoring-warning-when-move-will-hide-existing-member,IDEA,Eclipse,"Eclipse IDE for Enterprise Java and Web Developers (includes Incubating components)

Version: 2024-03 (4.31.0)
Build id: 20240307-1437",Oracle OpenJDK 22.0.1,Move Method,"public class A {
    static boolean truth = true;
    static void important() {
        System.out.println(1);
    }
}
public class B extends A{
    B() {
        important();
        System.out.println(truth);
    }
}
public class C{
    static boolean truth = false;
    static void important() {
        System.out.println(2);
    }
}",warning message,"public class A {
    static boolean truth = true;
    static void important() {
        System.out.println(1);
    }
}
public class B extends A{
    static boolean truth = false;

        B() {
        important();
        System.out.println(truth);
    }

        static void important() {
            System.out.println(2);
        }
}
public class C{
}",move refactoring for important() and truth in class C to B,behavior change,https://github.com/eclipse-jdt/eclipse.jdt.ui/issues/1530,pending
https://youtrack.jetbrains.com/issue/IDEA-151440/No-Move-Members-refactoring-warning-when-move-will-hide-existing-member,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Move Method,"public class A {
    static boolean truth = true;
    static void important() {
        System.out.println(1);
    }
}
public class B extends A{
    B() {
        important();
        System.out.println(truth);
    }
}
public class C{
    static boolean truth = false;
    static void important() {
        System.out.println(2);
    }
}",warning message,"public class A {
    static boolean truth = true;
    static void important() {
        System.out.println(1);
    }
}
public class B extends A{
    static boolean truth = false;

	B() {
        important();
        System.out.println(truth);
    }

	static void important() {
	    System.out.println(2);
	}
}
public class C{
}",move refactoring for important() and truth in class C to B,behavior change,,
https://youtrack.jetbrains.com/issue/IDEA-318626/Change-signature-incorrectly-wraps-unwraps-arguments-when-changing-between-varargs-and-arrays,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Change Mehtod Parameter,"public class A {
    public static void doSomething(int x, String... args) {
    
    }
    
    public static void main(String[] args) {
        doSomething(0, ""foo"", ""bar"");
        doSomething(0, new String[]{""one"", ""two""});
    }
}",-,"public class A {
    public static void doSomething(int x, String... args) {
    
    }
    
    public static void main(String[] args) {
        doSomething(0, ""foo"");
        doSomething(0, new String[]{""one"", ""two""});
    }
}",Change signature: String... -> String[],behavior change,,
https://youtrack.jetbrains.com/issue/IDEA-111735/Change-Signature-refactoring-corrupts-javadoc-links-references-to-the-method,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Change Mehtod Parameter,"import java.util.Collection;
import java.util.List;
import java.util.ArrayList;

public class A {
    public void foo(List<String> dates, Collection<String> timeUnits) {

    }

    /**
     * ... use {@link #foo(java.util.List, java.util.Collection)} as ...
     */
    public void bar() {

    }
}","import java.util.Collection;
import java.util.List;
import java.util.ArrayList;

public class A {
    public void foo(ArrayList<String> dates, Collection<String> timeUnits) {

    }

    /**
     * ... use {@link #foo(java.util.ArrayList, java.util.Collection)} as ...
     */
    public void bar() {

    }
}","import java.util.Collection;
import java.util.List;
import java.util.ArrayList;

public class A {
    public void foo(ArrayList<String> dates, Collection<String> timeUnits) {

    }

    /**
     * ... use {@link #foo(java.util.List, java.util.Collection)} as ...
     */
    public void bar() {

    }
}","change the type of the first parameter type by change method parameter,
check update the javadoc, but the javadoc not updated",comment related,,
https://youtrack.jetbrains.com/issue/IDEA-111739/Refactoring-Change-signature-change-type-of-the-method-incorrectly,IDEA,Eclipse,"Eclipse IDE for Enterprise Java and Web Developers (includes Incubating components)

Version: 2024-03 (4.31.0)
Build id: 20240307-1437",Oracle OpenJDK 22.0.1,Change Mehtod Parameter,"import java.util.List;

public class A<T extends List> {
        
    protected T getType() {
        return null;
    }
}
import java.util.ArrayList;

public class B extends A<ArrayList> {
        
    @Override
    protected ArrayList getType() {
        return super.getType();
    }
}",-,"import java.util.ArrayList;

public class B extends A<ArrayList> {
        
    @Override ArrayList getType() {
        return super.getType();
    }
}","change the visibility of class A method gettype to package level, 
in class B, the anotation is moved from top to the prefix of method.
other operation is good.",redundant change,,
https://youtrack.jetbrains.com/issue/IDEA-111739/Refactoring-Change-signature-change-type-of-the-method-incorrectly,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Change Mehtod Parameter,"import java.util.List;

public class A<T extends List> {
	
    protected T getType() {
        return null;
    }
}
import java.util.ArrayList;

public class B extends A<ArrayList> {
	
    @Override
    protected ArrayList getType() {
        return super.getType();
    }
}",warning message,"import java.util.List;

public class A<T extends List> {
    private T getType() {
        return null;
    }
}
import java.util.ArrayList;

public class B extends A<ArrayList> {
    @Override
    private ArrayList getType() {
        return super.getType();
    }
}","change the visibility of class B method to private, reducing compile error",compile error,,
https://youtrack.jetbrains.com/issue/IDEA-97203/Change-constructor-signature-add-Exception-break-code,IDEA,Eclipse,"Eclipse IDE for Enterprise Java and Web Developers (includes Incubating components)

Version: 2024-03 (4.31.0)
Build id: 20240307-1437",Oracle OpenJDK 22.0.1,Change Mehtod Parameter,"public class A {
    public A(String name){
    }
}
public class B extends A {
    public B(String name) {
        super(name);
    }
}",-,"public class A {
    public A(String name) throws Exception{
    }
}
public class B extends A {
    public B(String name) {
        super(name);
    }
}",add Exception for class A constructor,compile error,,
https://youtrack.jetbrains.com/issue/IDEA-152114/Change-signature-warns-but-not-change-method-reference-to-lambda,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Change Mehtod Parameter,"import java.util.ArrayList;
import java.util.List;
import java.util.function.Predicate;

public class A {
    public static void print() {
        List<Integer> someNumbers = A.returnAllNumbers(A::alwaysTrue);
    }

    private static List<Integer> returnAllNumbers(Predicate<Integer> predicate) {
        return new ArrayList<>();
    }

    public static boolean alwaysTrue(int a) {
        return true;
    }
}",warning message,"import java.util.ArrayList;
import java.util.List;
import java.util.function.Predicate;

public class A {
    public static void print() {
        List<Integer> someNumbers = A.returnAllNumbers(A::alwaysTrue);
    }

    private static List<Integer> returnAllNumbers(Predicate<Integer> predicate) {
        return new ArrayList<>();
    }

    public static boolean alwaysTrue(int a, int b) {
        return true;
    }
}",add one parameter for method alwaysTrue(),compile error,,
https://youtrack.jetbrains.com/issue/IDEA-103174/JDK-1.8-Type-Annotations-Change-Signature-Refactoring-allows-adding-annotations-shows-them-in-preview-but-doesnt-actually-add,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Change Mehtod Parameter,"import java.lang.annotation.ElementType;
import java.lang.annotation.Target;

@Target({ElementType.METHOD, ElementType.FIELD, ElementType.TYPE, ElementType.PACKAGE, ElementType.TYPE_USE, ElementType.PARAMETER, ElementType.CONSTRUCTOR, ElementType.LOCAL_VARIABLE})
public @interface Sample {}
public class A {
    public String foo() { return null; }
}
",-,wrong warning message,add annotation before the return type of method foo,incorrect warning message,,
https://youtrack.jetbrains.com/issue/IDEA-104286/Change-Signature-Refactoring-to-functional-interface-should-affect-lambda-expressions,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Change Mehtod Parameter,"public class A {
    static class Param { }

    static class Receiver {
        public void receive(LambdaInterface pInterface) {
            pInterface.lambda(new Param(), new Param());
        }
    }

    interface LambdaInterface {
        void lambda(Param param1, Param param2);
    }

    public static void main(String[] args) {
        new Receiver().receive((param1, param2) -> {
            System.out.println(""param1 = "" + param1);
            System.out.println(""param2 = "" + param2);
        });
    }
}",warning message,"public class A {
    static class Param { }

    static class Receiver {
        public void receive(LambdaInterface pInterface) {
            pInterface.lambda(new Param());
        }
    }

    interface LambdaInterface {
        void lambda(Param param1);
    }

    public static void main(String[] args) {
        new Receiver().receive((param1) -> {
            System.out.println(""param1 = "" + param1);
            System.out.println(""param2 = "" + param2);
        });
    }
}",remove the second parameter for method lambda,compile error,,
https://youtrack.jetbrains.com/issue/IDEA-91288/Inline-Refactoring-should-not-be-allowed-for-variables-initialized-with-condition,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Inline Variable,"public class A {
    private void computeIndex(boolean flag) {
        Integer iii = flag ? 1 : 2;
        iii.byteValue();
    }
}","public class A {

    private void computeIndex(boolean flag) {
        ((Integer) (flag ? 1 : 2)).byteValue();
    }
}","public class A {
    private void computeIndex(boolean flag) {
        (flag ? 1 : 2).byteValue();
    }
}",inline variable for iii,compile error,,
https://youtrack.jetbrains.com/issue/IDEA-97902/Inline-conditional-expression.-unnecessary-cast-to-boolean,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Inline Variable,"public class A {
    static boolean isA() {
        return true;
    }

    static boolean isB() {
        return true;
    }

    private static void foo(final boolean explicit) {
        boolean has = explicit ? isA() : isB();
        if (has) {
        }
    }
}",-,-,inline for variable has,incorrect warning message,,
https://youtrack.jetbrains.com/issue/IDEA-151960/Unable-to-inline-variable-used-in-lambda,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Inline Variable,"public class A {
    public static void main(String[] args) {
        String hello = new String(""hello"");
        Runnable x = () -> {
            System.out.println(hello);
        }; 
    }
}",-,-,inline variable for hello,incorrect warning message,,
https://youtrack.jetbrains.com/issue/IDEA-91371/JDK-1.8-Inline-Refactoring-doesnt-allow-to-inline-a-variable-declared-in-a-lambda,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Inline Variable,"public class A {
    public static void main(String[] args) {
        Runnable x = () -> {
            String hello = new String(""hello"");
            System.out.println(hello);
        };
    }
}",-,-,inline variable for hello,incorrect warning message,,
https://youtrack.jetbrains.com/issue/IDEA-152600/Inline-variable-which-represent-functional-reference-breaks-method-refence,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Inline Variable,"public class A {
    public static void main(String[] args) {
        Task t = () -> System.out.println(""hello"");
        Runnable r = t::doit;
    }
}

interface Task  {
    void doit();
}","public class A {
    public static void main(String[] args) {
        Runnable r = ((Task) () -> System.out.println(""hello""))::doit;
    }
}

interface Task  {
    void doit();
}","public class A {
    public static void main(String[] args) {
        Runnable r = (() -> System.out.println(""hello""))::doit;
    }
}

interface Task  {
    void doit();
}",inline variable for t,compile error,,
https://youtrack.jetbrains.com/issue/IDEA-152883/Non-required-cast-when-inline-this-reference-inside-local-class,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Inline Variable,"public class A {
    public void bar() {
        A foo = this;

        new Object() {
            public void run() {
                foo.baz(); // inline 'foo' variable
            }
        };
    }

    public void baz() {
    }
}","public class A {
    public void bar() {

        new Object() {
            public void run() {
                A.this.baz(); // inline 'foo' variable
            }
        };
    }

    public void baz() {
    }
}","public class A {
    public void bar() {

        new Object() {
            public void run() {
                this.baz(); // inline 'foo' variable
            }
        };
    }

    public void baz() {
    }
}",inline variable for foo,compile error,,
https://youtrack.jetbrains.com/issue/IDEA-139827/Avoid-the-perform-of-rename-refactoring-at-the-implicit-enum-elements-e.g.-values-method,IDEA,Eclipse,"Eclipse IDE for Enterprise Java and Web Developers (includes Incubating components)

Version: 2024-03 (4.31.0)
Build id: 20240307-1437",Oracle OpenJDK 22.0.1,Rename method,"public class A {
    {
        int length = new String[0].length;
    }
    enum M {
        ;
        {
            M.valueOf("""");
        }
    }
    enum S {
        ;
        {
            S.values();
        }
    }
}",warning message,-,"rename length, valueOf, and values",compile error,https://github.com/eclipse-jdt/eclipse.jdt.ui/issues/1531,pending
https://youtrack.jetbrains.com/issue/IDEA-139827/Avoid-the-perform-of-rename-refactoring-at-the-implicit-enum-elements-e.g.-values-method,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Rename method,"public class A {
    enum M {
        ;
        {
            M.valueOf("""");
        }
    }
    enum S {
        ;
        {
            S.values();
        }
    }
}",warning message,Exception,"rename valueOf, and values",Exception,,
https://youtrack.jetbrains.com/issue/IDEA-111875/Rename-method-do-not-allow-to-rename-if-theres-some-overloaded-method-with-same-erasure,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Rename method,"public class A<T> {
    void foo(T t) {
    }

    void foo1(Object t) {
    }
}",warning message,"public class A<T> {
    void foo1(T t) {
    }

    void foo1(Object t) {
    }
}",rename foo to foo1,compile error,,
https://youtrack.jetbrains.com/issue/IDEA-83831/rename...-silently-replaces-one-method-with-another,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Rename method,"public class A {
    static void foo1(Number n) {
        System.out.println(""1"");
    }
    static void foo2(Long i) {
        System.out.println(""2"");
    }
    public static void main(String[] args) {
        long n = 0;
        foo1(n);// rename foo1 to foo2
    }
}",warning message,"public class A {
    static void foo2(Number n) {
        System.out.println(""1"");
    }
    static void foo2(Long i) {
        System.out.println(""2"");
    }
    public static void main(String[] args) {
        long n = 0;
        foo2(n);// rename foo1 to foo2
    }
}",rename foo1 to foo2,behavior change,,
https://youtrack.jetbrains.com/issue/IDEA-311563/Pull-members-up-refactoring-should-not-allow-pulling-up-non-abstract-record-accessor-method,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Pull up,"public class A {
    interface I {}
    public record Rectangle(double width, double height) implements I {
        public double area() {
            return width * height;
        }

        public double perimeter() {
            return 2 * (width + height);
        }
    }

    public static void main(String[] args) {
        Rectangle rectangle = new Rectangle(3.0, 4.0);
        System.out.println(""Width: "" + rectangle.width());
        System.out.println(""Height: "" + rectangle.height());
        System.out.println(""Area: "" + rectangle.area());
        System.out.println(""Perimeter: "" + rectangle.perimeter());
    }
}",-,Exception,pull up height to interface,Exception,,
https://youtrack.jetbrains.com/issue/IDEA-311563/Pull-members-up-refactoring-should-not-allow-pulling-up-non-abstract-record-accessor-method,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Pull up,"public class A {
    interface I{}
    class Manager implements I{
        public Employee employee;

//        public void manage() {
//            System.out.println(""Managing "" + employee.getName());
//        }
    }

    class Employee implements I{
        private String name;

        public String getName() {
            return name;
        }
    }
}",-,"public class A {
    interface I{

        public Employee employee;
//        public void manage() {
//            System.out.println(""Managing "" + employee.getName());
//        }
    }
    class Manager implements I{
    }

    class Employee implements I{
        private String name;

        public String getName() {
            return name;
        }
    }
}",pull up employee into interface,compile error,,
https://youtrack.jetbrains.com/issue/IDEA-144043/Pull-Members-Up-refactoring-breaks-code,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Pull up,"public class A {

}
public class B extends A {
    public void m() {} // pull m up and make abstract

    void n() { // or pull n up and make abstract
        new A();
    }
}",-,"public abstract class A {

    public abstract void m() // pull m up and make abstract
    ;
}
public class B extends A {
    @Override
    public void m() {} // pull m up and make abstract

    void n() { // or pull n up and make abstract
        new A();
    }
}",pull m or n up,compile error,,
https://youtrack.jetbrains.com/issue/IDEA-117671/Incorrect-warning-from-Pull-Members-Up-refactoring,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Pull up,"public class A {

}

import java.util.HashMap;
import java.util.Map;

class B extends A {
    void foo() {
        HM<String, String> hm = new HM<>();
        for (Map.Entry<String, String> stringStringEntry : hm.entrySet()) {}
    }
    private static class HM<K, V> extends HashMap<K, V> {}
}",-,"public class A {

    void foo() {
        B.HM<String, String> hm = new B.HM<>();
        for (Map.Entry<String, String> stringStringEntry : hm.entrySet()) {
        }
    }
    
}
import java.util.HashMap;
import java.util.Map;

class B extends A {
    private static class HM<K, V> extends HashMap<K, V> {}
}",pull foo up to class A,compile error,,
https://youtrack.jetbrains.com/issue/IDEA-87191/Pull-Members-Up-refactor-fails-to-merge-superinterfaces,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Pull up,"import java.util.Collection;

public class A {
    static abstract class A1 implements Collection<String> { }

    static abstract class B1 extends A1 implements Collection<String> { }
}",-,"import java.util.Collection;

public class A {
    static abstract class A1 implements Collection<String>, Collection { }

    static abstract class B1 extends A1 { }
}",pull implements Collection up,compile error,,
https://youtrack.jetbrains.com/issue/IDEA-87543/Pull-Members-Up-fails-when-class-type-parameters-are-aliased-with-superclass-type-parameters,IDEA,Eclipse,"Eclipse IDE for Enterprise Java and Web Developers (includes Incubating components)

Version: 2024-03 (4.31.0)
Build id: 20240307-1437",Oracle OpenJDK 22.0.1,Pull up,"public class A {
    public interface Bar<T> { }

    public interface Base<T> { }

    public class Foo<T,U> implements Base<U> {
        public void foo(Bar<U> bar) { }
    }
}",-,"public class A {
    public interface Bar<T> { }

    public interface Base<T> {

		void foo(Bar<U> bar); }

    public class Foo<T,U> implements Base<U> {
        @Override
		public void foo(Bar<U> bar) { }
    }
}",pull foo up to Base,compile error,https://github.com/eclipse-jdt/eclipse.jdt.ui/issues/1532,pending
https://bugs.eclipse.org/bugs/show_bug.cgi?id=185330,Eclipse,IDEA,"IntelliJ IDEA 2024.1.1 (Ultimate Edition)
Build #IU-241.15989.150, built on April 29, 2024
Runtime version: 17.0.10+1-b1207.14 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o",Oracle OpenJDK 17.0.8,Introduce Parameter,"public class A {
    int f() {
        System.out.println(""aaa"");
        return 0;
    }

    static void m(A a) {
        a.f();
        a.f();
    }

    public static void main(String[] args) {
        m(new A());
    }
}",-,"public class A {
    int f() {
        System.out.println(""aaa"");
        return 0;
    }

    static void m(int f) {
    }

    public static void main(String[] args) {
        final A a = new A();
        m(a.f());
    }
}","select a.f();
Refactor->Introduce Parameter, replace all occurances, press Enter",behavior change,https://youtrack.jetbrains.com/issue/IDEA-354039/Introduce-Parameter-refactoring-changes-the-behavior-of-my-program,confirmed
https://bugs.eclipse.org/bugs/show_bug.cgi?id=47062,Eclipse,IDEA,"IntelliJ IDEA 2024.1.1 (Ultimate Edition)
Build #IU-241.15989.150, built on April 29, 2024
Runtime version: 17.0.10+1-b1207.14 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o",Oracle OpenJDK 17.0.8,Change Signature,"@Target(ElementType.TYPE_USE)
public @interface Sample {}

public String foo() { return null; }",public @Sample String foo(@Sample Integer p) throws @Sample Exception { return null; },public @Sample String foo(@Sample Integer p) throws Exception { return null; },"Invoke the refactoring for the method.
Add @Sample to the return type, @Sample Integer p parameter and throws @Sample Exception clause.
Check that everything is correctly shown in preview. Press Refactor.",Fail to refactoring,https://youtrack.jetbrains.com/issue/IDEA-354040/Change-Signature-refactoring-fail-to-perform-the-change-as-shown-in-the-preview,confirmed
https://bugs.eclipse.org/bugs/show_bug.cgi?id=369295,Eclipse,IDEA,"IntelliJ IDEA 2024.1.1 (Ultimate Edition)
Build #IU-241.15989.150, built on April 29, 2024
Runtime version: 17.0.10+1-b1207.14 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o",Oracle OpenJDK 17.0.8,Extract Method,"public class A {
    public static void main(String[] args) {
        final String s = ""text"";
        class B {
            public String foo() {
                return s;
            }
        }
        System.out.println(new B().foo());
    }
}","public class A {

    public static void main(String[] args) {
        final String s = ""text"";
        extracted(s);
    }

        private static void extracted(final String s) {
                class B {
            public String foo() {
                return s;
            }
        }
        System.out.println(new B().foo());
        }
}","public class A {
    public static void main(String[] args) {
        final String s = ""text"";
        extracted(s);
    }

    private static void extracted(String s) {
        class B {
            public String foo() {
                return s;
            }
        }
        System.out.println(new B().foo());
    }
}","extract whole 'main' body except the first line, the extracted method should have ""final String s"" parameter, but in the latest IDEA version, it is not",Fail to refactoring,https://youtrack.jetbrains.com/issue/IDEA-354041/Extract-method-refactoring-issue-about-the-parameter-of-the-extracted-method,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=105829,Eclipse,IDEA,"IntelliJ IDEA 2024.1.1 (Ultimate Edition)
Build #IU-241.15989.150, built on April 29, 2024
Runtime version: 17.0.10+1-b1207.14 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o",Oracle OpenJDK 17.0.8,Type Immigration,"public class A {
        public void m(C c) {c.n();}
}

public class B extends A {
        public void m(C c) {}
        public void m(I c) {}
}

public class C implements I {
        public void n() {};
}

public interface I {
        public abstract void n();
}",-,"public class A {
        public void m(I c) {c.n();}
}

public class B extends A {
        public void m(C c) {}
        public void m(I c) {}
}

public class C implements I {
        public void n() {};
}

public interface I {
        public abstract void n();
}","generalizing type of c in A.m(C c) offers I, which makes B.m(I c) duplicate",Compile error,https://youtrack.jetbrains.com/issue/IDEA-354042/Type-Migration-refactoring-produce-refactored-program-contains-syntax-error,confirmed
https://youtrack.jetbrains.com/issue/IDEA-87543/Pull-Members-Up-fails-when-class-type-parameters-are-aliased-with-superclass-type-parameters,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,pull up,"public class A {
    public interface JSam {
        void bar(String p);
    }

    interface JsamImpl extends JSam {
        void foo();
    }

    class User {
        void test() {
            JSam jSam = (String p) -> {};

            (new JSam() {
                public void bar(String p) {}
            }).bar("""");
        }
    }
}",-,"public class A {
    public interface JSam {
        void bar(String p);

        void foo();
    }

    interface JsamImpl extends JSam {
    }

    class User {
        void test() {
            JSam jSam = (String p) -> {};

            (new JSam() {
                public void bar(String p) {}
            }).bar("""");
        }
    }
}",push down bar(),incorrect warning message,,
https://youtrack.jetbrains.com/issue/IDEA-151942/Problems-with-Pulling-Up-method-of-Inner-class,IDEA,Eclipse,"Eclipse IDE for Enterprise Java and Web Developers (includes Incubating components)

Version: 2024-03 (4.31.0)
Build id: 20240307-1437",Oracle OpenJDK 22.0.1,Pull up,"public class A {
    public class BaseInner {}

    public class Outer {
        public int x = 0;
        public void foo(){};

        public class Inner extends BaseInner {
            void innerMethod() { // PULL this method UP
                System.out.println(Outer.this.x);
                Outer.this.foo();
            }
        }
    }
}",-,"import com.concordia.my.retester.A.Outer.Inner;

public class A {
    public class BaseInner {

                void innerMethod(Inner inner) { // PULL this method UP
                    System.out.println(inner.x);
                    inner.foo();
                }}

    public class Outer {
        public int x = 0;
        public void foo(){};

        public class Inner extends BaseInner {
        }
    }
}",pull innerMethod() up,compile error,https://github.com/eclipse-jdt/eclipse.jdt.ui/issues/1533,pending
https://youtrack.jetbrains.com/issue/IDEA-151942/Problems-with-Pulling-Up-method-of-Inner-class,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Pull up,"public class A {
    public class BaseInner {}

    public class Outer {
        public int x = 0;
        public void foo(){};

        public class Inner extends BaseInner {
            void innerMethod() { // PULL this method UP
                System.out.println(Outer.this.x);
                Outer.this.foo();
            }
        }
    }
}",-,"public class A {
    public class BaseInner {

        void innerMethod() {
            // PULL this method UP
            System.out.println(Outer.this.x);
            Outer.this.foo();
        }
    }

    public class Outer {
        public int x = 0;
        public void foo(){};

        public class Inner extends BaseInner {
        }
    }
}",pull innerMethod() up,compile error,,
https://youtrack.jetbrains.com/issue/IDEA-146787/Refactor-Extract-constant-places-constant-in-wrong-class,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Introduce Constant,"public class A {
    class ExtractConstantBefore {

        public String getString() {
            return StaticInner.STRING;
        }

        static class StaticInner {
            public static String STRING = ""aaaa"";
        }
    }
}","public class A {
    class ExtractConstantBefore {

        private static final String S_TRING = StaticInner.STRING;

		public String getString() {
            return S_TRING;
        }

        static class StaticInner {
            public static String STRING = ""aaaa"";
        }
    }
}","public class A {
    class ExtractConstantBefore {

        public String getString() {
            return STRING;
        }

        static class StaticInner {
            public static String STRING = ""aaaa"";
        }
    }
    private static final String STRING = StaticInner.STRING;
}",Introduce constant for StaticInner.STRING in getString(),compile error,,
https://youtrack.jetbrains.com/issue/IDEA-118166/Extracting-a-constant-from-annotation-value-does-not-search-for-the-same-value-within-the-code,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Introduce Constant,"public class A {
    @SuppressWarnings(value= {""all"", ""rawtypes""})
    public class SomeClass {

        public String getModelName() {
            return ""all"";
        }
    }

    @interface Model {
        Usage usages();
    }
    @interface Usage {
        String value();
    }
}",-,"public class A {
    @SuppressWarnings(value= {ALL, ""rawtypes""})
    public class SomeClass {

        private static final String ALL = ""all"";

        public String getModelName() {
            return ALL;
        }
    }

    @interface Model {
        Usage usages();
    }
    @interface Usage {
        String value();
    }
}","Introduce constant for ""all"" and replace all occurances",compile error,,
https://youtrack.jetbrains.com/issue/IDEA-118166/Extracting-a-constant-from-annotation-value-does-not-search-for-the-same-value-within-the-code,IDEA,Eclipse,"Eclipse IDE for Enterprise Java and Web Developers (includes Incubating components)

Version: 2024-03 (4.31.0)
Build id: 20240307-1437",Oracle OpenJDK 22.0.1,Introduce Constant,"public class A {
    @SuppressWarnings(value= {""all"", ""rawtypes""})
    public class SomeClass {

        public String getModelName() {
            return ""all"";
        }
    }

    @interface Model {
        Usage usages();
    }
    @interface Usage {
        String value();
    }
}",-,"public class A {
	@SuppressWarnings(value= {""all"", ""rawtypes""})
    public class SomeClass {

        private static final String ALL = ""all"";

		public String getModelName() {
            return ALL;
        }
    }

    @interface Model {
        Usage usages();
    }
    @interface Usage {
        String value();
    }
}","Introduce constant for ""all"" and replace all occurances, 
select the first and te second have different result",Fail to refactoring,,
https://youtrack.jetbrains.com/issue/IDEA-85307/Extract-constant-in-interface-adds-private-modifier-to-generated-constant,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Introduce Variable,"public class A {
    public interface Test { 
        @SuppressWarnings(value= {""all"", ""rawtypes""})  
        void test();
    }
}",-,-,"Introduce constant for ""all"", input everything, press refactor, nothing happens",Fail to refactoring,,
https://youtrack.jetbrains.com/issue/IDEA-104986/Make-inner-class-incorrect-accessibility-warning-about-inner-class,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Move Class,"public class A {

  class Inner {
  }
  Inner i;
}
class B{

    
}",-,-,"move class A to B, undo, show can't undo but actually already undo",incorrect warning message,,
https://github.com/apache/netbeans/issues/7293,NetBeans,IDEA,"ntelliJ IDEA 2024.1.2 (Ultimate Edition
Build #IU-241.17011.79, built on May 22, 2024
untime version: 17.0.11+1-b1207.24 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.","Java(TM) SE Runtime Environment (build 22.0.1+8-16)
Java HotSpot(TM) 64-Bit Server VM (build 22.0.1+8-16, mixed mode, sharing)",Introduce Vriable,"public class A {
    public void method() {
        int a;
        if (true) {
            // select ""a"" to introduce variable
            a = 3;
        }
    }
}",,"public class A {
    public void method() {
        int a;
        if (true) {
            // select ""a"" to introduce variable
            int a1 = a;
            a1 = 3;
        }
    }
}",perform introduce variable on a,compile error,,
https://github.com/apache/netbeans/issues/7294,NetBeans,IDEA,"ntelliJ IDEA 2024.1.2 (Ultimate Edition
Build #IU-241.17011.79, built on May 22, 2024
untime version: 17.0.11+1-b1207.24 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.","Java(TM) SE Runtime Environment (build 22.0.1+8-16)
Java HotSpot(TM) 64-Bit Server VM (build 22.0.1+8-16, mixed mode, sharing)",Introduce Vriable,"public class A {
    public void test() {
        int[] arrs = {1,2,3};
        int a = 0;
        // extract variable: arrs[a]
        System.out.println(arrs[a]);
        a++;
        System.out.println(arrs[a]);
        a++;
        System.out.println(arrs[a]);
    }
}",-,"public class A {
    public void test() {
        int[] arrs = {1,2,3};
        int a = 0;
        // extract variable: arrs[a]
        int arr = arrs[a];
        System.out.println(arr);
        a++;
        System.out.println(arr);
        a++;
        System.out.println(arr);
    }
}",extract variable: arrs[a],behavior change,,
https://github.com/apache/netbeans/issues/7291,NetBeans,IDEA,"ntelliJ IDEA 2024.1.2 (Ultimate Edition
Build #IU-241.17011.79, built on May 22, 2024
untime version: 17.0.11+1-b1207.24 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.","Java(TM) SE Runtime Environment (build 22.0.1+8-16)
Java HotSpot(TM) 64-Bit Server VM (build 22.0.1+8-16, mixed mode, sharing)",Introduce Vriable,"public class A {
    public void f() {}
}
public class B extends A {
    public void c() {
        // extract local variable: super
        super.f();
    }
}",-,"public class B extends A {
    public void c() {
        // extract local variable: super
        A a = super;
        a.f();
    }
}","select super, extract local variable",compile error,,
https://github.com/apache/netbeans/issues/7292,NetBeans,IDEA,"ntelliJ IDEA 2024.1.2 (Ultimate Edition
Build #IU-241.17011.79, built on May 22, 2024
untime version: 17.0.11+1-b1207.24 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.","Java(TM) SE Runtime Environment (build 22.0.1+8-16)
Java HotSpot(TM) 64-Bit Server VM (build 22.0.1+8-16, mixed mode, sharing)",Introduce Vriable,"public class A {
    public void method(int localVar) {
        // extract variable: 5, rename ""localVar""
        System.out.println(5);
    }
}",-,"public class A {
    public void method(int localVar) {
        // extract variable: 5, rename ""localVar""
        int localVar = 5;
        System.out.println(localVar);
    }
}","extract variable: 5, rename ""localVar""",compile error,,
https://github.com/apache/netbeans/issues/7288,NetBeans,IDEA,"ntelliJ IDEA 2024.1.2 (Ultimate Edition
Build #IU-241.17011.79, built on May 22, 2024
untime version: 17.0.11+1-b1207.24 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.","Java(TM) SE Runtime Environment (build 22.0.1+8-16)
Java HotSpot(TM) 64-Bit Server VM (build 22.0.1+8-16, mixed mode, sharing)",Extract Method,"public class A {
    private final int value;
    public A(int value) {
        // extract method
        this.value = value;
    }

}",-,"public class A {
    private final int value;
    public A(int value) {
        // extract method
        value = getValue(value);
    }

    private int getValue(int value) {
        final int value;
        this.value = value;
        return value;
    }

}","When I select the statement ""this. value=value;"" and perform the extract method refactoring, the new method name is ""newMethod"" and I click ""OK"", a syntax compilation error occurs",compile error,,
https://github.com/apache/netbeans/issues/7298,NetBeans,IDEA,"ntelliJ IDEA 2024.1.2 (Ultimate Edition
Build #IU-241.17011.79, built on May 22, 2024
untime version: 17.0.11+1-b1207.24 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.","Java(TM) SE Runtime Environment (build 22.0.1+8-16)
Java HotSpot(TM) 64-Bit Server VM (build 22.0.1+8-16, mixed mode, sharing)",Inline Method,"public class A {
    public void main() {
        class T {
            public T() {}
        }
        inlineMethod();
    }
    // inline method
    public void inlineMethod() {
        class T {
            T t;
            public T() {}
        }
    }

}",-,"public class A {
    public void main() {
        class T {
            public T() {}
        }
        class T {
            T t;
            public T() {}
        }
    }
    // inline method

}","When I select "" inlineMethod() "" and perform the inline method refactoring, and i click ""OK"", a syntax error occurs",compile error,,
https://github.com/apache/netbeans/issues/7296,NetBeans,IDEA,"ntelliJ IDEA 2024.1.2 (Ultimate Edition
Build #IU-241.17011.79, built on May 22, 2024
untime version: 17.0.11+1-b1207.24 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.","Java(TM) SE Runtime Environment (build 22.0.1+8-16)
Java HotSpot(TM) 64-Bit Server VM (build 22.0.1+8-16, mixed mode, sharing)",Inline Method,"import java.io.IOException;

public class A {
    public void originalMethod() throws IOException {

    }
}
import java.io.IOException;

public class B {
    public void callerMethod(){
        A obj = new A();
        try {
            // inline method ""originalMethod()""
            obj.originalMethod();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}",-,"public class A {
}
import java.io.IOException;

public class B {
    public void callerMethod(){
        A obj = new A();
        try {
            // inline method ""originalMethod()""

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}","When I select ""originalMethod()"" and perform the inline method refactoring, and i click ""OK"", a syntax compilation error occurs",compile error,,
https://github.com/apache/netbeans/issues/7314,NetBeans,IDEA,"ntelliJ IDEA 2024.1.2 (Ultimate Edition
Build #IU-241.17011.79, built on May 22, 2024
untime version: 17.0.11+1-b1207.24 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.","Java(TM) SE Runtime Environment (build 22.0.1+8-16)
Java HotSpot(TM) 64-Bit Server VM (build 22.0.1+8-16, mixed mode, sharing)",Move Method,"public class A {
    private MyInterface target;
    public A(MyInterface target) {
        this.target = target;
    }
    // move method
    public void moveMethod(MyInterface parameter) {
        ((MyInterface) target.abstractField).methodWithSameName();
    }
}
public interface MyInterface {
    Object abstractField = null;
    void methodWithSameName();
}",-,"public class A {
    private MyInterface target;
    public A(MyInterface target) {
        this.target = target;
    }
}
public interface MyInterface {
    Object abstractField = null;
    void methodWithSameName();

    // move method
    default void moveMethod(A a) {
        ((MyInterface) a.target.abstractField).methodWithSameName();
    }
}","When I select ""moveMethod()"" and perform the move method refactoring, and i click ""OK"", a syntax error",compile error,,
https://github.com/apache/netbeans/issues/7312,NetBeans,IDEA,"ntelliJ IDEA 2024.1.2 (Ultimate Edition
Build #IU-241.17011.79, built on May 22, 2024
untime version: 17.0.11+1-b1207.24 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.","Java(TM) SE Runtime Environment (build 22.0.1+8-16)
Java HotSpot(TM) 64-Bit Server VM (build 22.0.1+8-16, mixed mode, sharing)",Move Method,"public class A {
    MyInterface target;

    public A(MyInterface target) {
        this.target = target;
    }

    private final void methodToMove(MyInterface a) {
        // Method implementation
        this.target = a;
    }
}
public interface MyInterface {
    void methodInInterface();
}",-,"public class A {
    MyInterface target;

    public A(MyInterface target) {
        this.target = target;
    }

}
public interface MyInterface {
    void methodInInterface();

    default void methodToMove(MyInterface a, A a) {
        // Method implementation
        this = a;
    }
}","When I select ""methodToMove()"" and perform the move method refactoring, move toTargetClass and i click ""OK"", a syntax error",compile error,,
https://github.com/apache/netbeans/issues/7307,NetBeans,IDEA,"ntelliJ IDEA 2024.1.2 (Ultimate Edition
Build #IU-241.17011.79, built on May 22, 2024
untime version: 17.0.11+1-b1207.24 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.","Java(TM) SE Runtime Environment (build 22.0.1+8-16)
Java HotSpot(TM) 64-Bit Server VM (build 22.0.1+8-16, mixed mode, sharing)",Move Method,"public class A {
    public int m() {
        return 1;
    }
    public class C extends A {
        // move method to class B
        public int m(B b) {
            return super.m();
        }
    }
}
public class B {

}",-,"public class A {
    public int m() {
        return 1;
    }
    public class C extends A {
    }
}
public class B {

    // move method to class B
    public int m() {
        return super.m();
    }
}","When I select ""m()"" and perform the move method refactoring, and i click ""OK"", a syntax error",compile error,,
https://github.com/apache/netbeans/issues/7300,NetBeans,IDEA,"ntelliJ IDEA 2024.1.2 (Ultimate Edition
Build #IU-241.17011.79, built on May 22, 2024
untime version: 17.0.11+1-b1207.24 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.","Java(TM) SE Runtime Environment (build 22.0.1+8-16)
Java HotSpot(TM) 64-Bit Server VM (build 22.0.1+8-16, mixed mode, sharing)",Rename Method,"public class A {
    void m(Object m){
        System.out.println(""A"");
    }
}
public class B extends A {
    // rename k to m
    void k(String m){
        System.out.println(""B"");
    }
    void f(){
        m(""1"");
    }
}",-,"public class A {
    void m(Object m){
        System.out.println(""A"");
    }
}
public class B extends A {
    // rename k to m
    void m(String m){
        System.out.println(""B"");
    }
    void f(){
        m(""1"");
    }
}","When I select ""k()"" and perform the rename method refactoring, new naem ""m()"" and i click ""OK"", a syntax error",behavior change,,
https://bz.apache.org/netbeans/show_bug.cgi?id=228708,NetBeans,IDEA,"ntelliJ IDEA 2024.1.2 (Ultimate Edition
Build #IU-241.17011.79, built on May 22, 2024
untime version: 17.0.11+1-b1207.24 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.","Java(TM) SE Runtime Environment (build 22.0.1+8-16)
Java HotSpot(TM) 64-Bit Server VM (build 22.0.1+8-16, mixed mode, sharing)",Rename Method,"public interface MyInterface {
    public boolean test();
}
public class A implements MyInterface{

    @Override
    public boolean test() {
        return false;
    }
}",-,-,rename method test,compile error,,
https://bz.apache.org/netbeans/show_bug.cgi?id=230930,NetBeans,Eclipse,"Eclipse IDE for Enterprise Java and Web Developers (includes Incubating components)

Version: 2024-03 (4.31.0)
Build id: 20240307-1437",Oracle OpenJDK 22.0.1,Pull up method,"public interface MyInterface {

}
public class A implements MyInterface {
    public static void method() {

    }
}",-,"public interface MyInterface {

	void method();

}
public class A implements MyInterface {
    @Override
	public static void method() {

    }
}",pull up method,compile error,,
https://github.com/eclipse-jdt/eclipse.jdt.ui/issues/1023,Eclipse,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Extract Constant,"import java.lang.annotation.ElementType;
import java.lang.annotation.Target;

@Target({ElementType.METHOD, ElementType.FIELD, ElementType.TYPE, ElementType.PACKAGE, ElementType.TYPE_USE, ElementType.PARAMETER, ElementType.CONSTRUCTOR, ElementType.LOCAL_VARIABLE})
public @interface Sample {
    String value();
}
@Sample(value = ""vvvv"")
public class A {
    
}","@Sample(value = A.ALL)
public class A {

    public static final String ALL = ""vvvv"";
}","@Sample(value = VVVV)
public class A {

    private static final String VVVV = ""vvvv"";
    
}",Extract constant for string literal in the annotation,compile error,,
https://github.com/eclipse-jdt/eclipse.jdt.ui/issues/338,Eclipse,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Move Type to New File,"public class A {
    static class Bar {
        static class X {
            static void method() {
                var x = new X();
                System.out.println(x);
            }
        }
    }
}","public class A {
    static class Bar {
    }

    static class X {
        static void method() {
            var x = new X();
            System.out.println(x);
        }
    }
}","public class A {
    static class Bar {
    }

    class X {

        static void method() {
            com.mycompany.mavenproject22.A.X x = new X();
            System.out.println(x);
        }
    }
}",Move Inner to Outer Level for class X,compile error,,
https://github.com/eclipse-jdt/eclipse.jdt.ui/issues/1360,Eclipse,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Inline method,"public class A {
    private boolean flag = false;
    public synchronized void originalMethod() throws InterruptedException {
        // Some logic here
        flag = true;
        notify();
    }

    public void callerMethod() throws InterruptedException {
        originalMethod() ;
    }
}",-,"public class A {
    private boolean flag = false;

    public void callerMethod() throws InterruptedException {
        // Some logic here
        flag = true;
        notify();
    }
}","select “originalMethod() ”
click “Refactor-inlinemethod”",behavior change,,
https://github.com/eclipse-jdt/eclipse.jdt.ui/issues/1286,Eclipse,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Extract Method,"public class A {
    public static void main(String[] args) {
        int dayOfWeek = 3; // Let's assume 1 = Monday, 2 = Tuesday, ..., 7 = Sunday

        String dayType = switch (dayOfWeek) {
            case 1, 2, 3, 4, 5 -> ""Weekday"";
            case 6, 7 -> ""Weekend"";
            default -> {
                yield ""Invalid day"";
            }
        };

        System.out.println(""Day type: "" + dayType);
    }
}",-,"public class A {
    public static void main(String[] args) {
        int dayOfWeek = 3; // Let's assume 1 = Monday, 2 = Tuesday, ..., 7 = Sunday

        String dayType = switch (dayOfWeek) {
            case 1, 2, 3, 4, 5 -> ""Weekday"";
            case 6, 7 -> ""Weekend"";
            default -> {
                aa();
            }
        };

        System.out.println(""Day type: "" + dayType);
    }

    private static void aa() {
        yield ""Invalid day"";
    }
}","Select the whole line ""yield ..."", extract method",compile error,,
https://github.com/eclipse-jdt/eclipse.jdt.ui/issues/1286,Eclipse,IDEA,"ntelliJ IDEA 2024.1.2 (Ultimate Edition
Build #IU-241.17011.79, built on May 22, 2024
untime version: 17.0.11+1-b1207.24 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.","Java(TM) SE Runtime Environment (build 22.0.1+8-16)
Java HotSpot(TM) 64-Bit Server VM (build 22.0.1+8-16, mixed mode, sharing)",Extract Method,"public class A {
    public static void main(String[] args) {
        int dayOfWeek = 3; // Let's assume 1 = Monday, 2 = Tuesday, ..., 7 = Sunday

        String dayType = switch (dayOfWeek) {
            case 1, 2, 3, 4, 5 -> ""Weekday"";
            case 6, 7 -> ""Weekend"";
            default -> {
                yield ""Invalid day"";
            }
        };

        System.out.println(""Day type: "" + dayType);
    }
}",-,"public class A {
    public static void main(String[] args) {
        int dayOfWeek = 3; // Let's assume 1 = Monday, 2 = Tuesday, ..., 7 = Sunday

        String dayType = switch (dayOfWeek) {
            case 1, 2, 3, 4, 5 -> ""Weekday"";
            case 6, 7 -> ""Weekend"";
            default -> {
                aa();
            }
        };

        System.out.println(""Day type: "" + dayType);
    }

    private static void aa() {
        yield ""Invalid day"";
    }
}","Select the whole line ""yield ..."", extract method",compile error,,
https://github.com/eclipse-jdt/eclipse.jdt.ui/issues/197,Eclipse,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Inline Method,"public class A {
    public static String format (String... input) {
        return """";
    }
    public static void main(String[] args) {
        int value = 0;
        String message = switch (value) {
            case 0 -> format("""");
            default -> """";
        };
    }
}",-,Exception,Inline method format(),Exception,,
https://github.com/eclipse-jdt/eclipse.jdt.ui/issues/432,Eclipse,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Extract variable,"public class A {
        public static void main(String[] args) {
                String[] Lines = {""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9""};
                int i = 0;
                System.out.println(Lines[i]);
                i++;
                System.out.println(Lines[i]);
        }
}",-,"public class A {
        public static void main(String[] args) {
                String[] Lines = {""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9""};
                int i = 0;
                String line = Lines[i];
                System.out.println(line);
                i++;
                System.out.println(line);
        }
}",Extract variable for Lines[i] and replace 2 occurances,behavior change,,
https://github.com/eclipse-jdt/eclipse.jdt.ui/issues/432,Eclipse,IDEA,"ntelliJ IDEA 2024.1.2 (Ultimate Edition
Build #IU-241.17011.79, built on May 22, 2024
untime version: 17.0.11+1-b1207.24 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.","Java(TM) SE Runtime Environment (build 22.0.1+8-16)
Java HotSpot(TM) 64-Bit Server VM (build 22.0.1+8-16, mixed mode, sharing)",Extract variable,"public class A {
        public static void main(String[] args) {
                String[] Lines = {""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9""};
                int i = 0;
                System.out.println(Lines[i]);
                i++;
                System.out.println(Lines[i]);
        }
}",-,"public class A {
        public static void main(String[] args) {
                String[] Lines = {""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9""};
                int i = 0;
                String line = Lines[i];
                System.out.println(line);
                i++;
                System.out.println(line);
        }
}",Extract variable for Lines[i] and replace 2 occurances,behavior change,https://youtrack.jetbrains.com/issue/IDEA-355421/Introduce-Variable-refactoring-changes-the-semantic-of-the-program-because-IDEA-does-not-identify-the-statements-that-may-change,pending
https://github.com/eclipse-jdt/eclipse.jdt.ui/issues/39,Eclipse,IDEA,"IntelliJ IDEA 2024.1.2 (Ultimate Edition
Build #IU-241.17011.79, built on May 22, 2024
untime version: 17.0.11+1-b1207.24 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.","Java(TM) SE Runtime Environment (build 22.0.1+8-16)
Java HotSpot(TM) 64-Bit Server VM (build 22.0.1+8-16, mixed mode, sharing)",Extract variable,"import java.util.Locale;

public class A {
    public String metaPhone(final String txt) {
        boolean hard = false;
        if (txt == null || txt.length() == 0) {
            return """";
        }
        if (txt.length() == 1) {
            return txt.toUpperCase(Locale.ENGLISH);
        }
        //Do other things
        // ...
        return """";
    }
}",-,"import java.util.Locale;

public class A {
    public String metaPhone(final String txt) {
        boolean hard = false;
            int length = txt.length();
            if (txt == null || length == 0) {
            return """";
        }
        if (txt.length() == 1) {
            return txt.toUpperCase(Locale.ENGLISH);
        }
        //Do other things
        // ...
        return """";
    }
}","If we select expression txt.length() (line 4 in CS1), conduct refactoring ""extract local variable"",and name the new variable as length",behavior change,-,
https://github.com/eclipse-jdt/eclipse.jdt.ui/issues/39,Eclipse,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Extract variable,"import java.util.Locale;

public class A {
    public String metaPhone(final String txt) {
        boolean hard = false;
        if (txt == null || txt.length() == 0) {
            return """";
        }
        if (txt.length() == 1) {
            return txt.toUpperCase(Locale.ENGLISH);
        }
        //Do other things
        // ...
        return """";
    }
}",-,"import java.util.Locale;

public class A {
    public String metaPhone(final String txt) {
        boolean hard = false;
            int length = txt.length();
            if (txt == null || length == 0) {
            return """";
        }
        if (txt.length() == 1) {
            return txt.toUpperCase(Locale.ENGLISH);
        }
        //Do other things
        // ...
        return """";
    }
}","If we select expression txt.length() (line 4 in CS1), conduct refactoring ""extract local variable"",and name the new variable as length",behavior change,,
https://github.com/eclipse-jdt/eclipse.jdt.ui/issues/331,Eclipse,IDEA,"IntelliJ IDEA 2024.1.2 (Ultimate Edition
Build #IU-241.17011.79, built on May 22, 2024
untime version: 17.0.11+1-b1207.24 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.","Java(TM) SE Runtime Environment (build 22.0.1+8-16)
Java HotSpot(TM) 64-Bit Server VM (build 22.0.1+8-16, mixed mode, sharing)",Extract variable,"public class A {
    void foo(Object obj) {
        if (obj instanceof Integer && ((Integer) obj).intValue() > 0) {
            System.out.println(((Integer) obj).intValue());
        } else if (obj instanceof Float && ((Float) obj).floatValue() > 0.0) {
            System.out.println(((Float) obj).floatValue());
        }
    }
}",-,"public class A {
    void foo(Object obj) {
        int intValue = ((Integer) obj).intValue();
        if (obj instanceof Integer && intValue > 0) {
            System.out.println(intValue);
        } else if (obj instanceof Float && ((Float) obj).floatValue() > 0.0) {
            System.out.println(((Float) obj).floatValue());
        }
    }
}","If we select the expression ((Integer)obj).intValue() (line 4 in CS1), and conduct refactoring ""extract local variable"",and name the new variable as value, we will get the following code snippet.If the method is called via foo(new Float(3.5)), the refactored version of the method would result in ClassCastException whereas the original version would not.",behavior change,-,
https://github.com/eclipse-jdt/eclipse.jdt.ui/issues/348,Eclipse,IDEA,"IntelliJ IDEA 2024.1.2 (Ultimate Edition
Build #IU-241.17011.79, built on May 22, 2024
untime version: 17.0.11+1-b1207.24 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.","Java(TM) SE Runtime Environment (build 22.0.1+8-16)
Java HotSpot(TM) 64-Bit Server VM (build 22.0.1+8-16, mixed mode, sharing)",Extract variable,"public class A {
        static String[] Lines = {""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9""};
        static int i = 0;

        private static String foo(String msg) {
                return msg+"": ""+ Lines[i++];
        }

        public static void main(String[] args) {
                System.out.println(foo(""Format warning""));
                System.out.println(foo(""Format warning""));

        }
}",-,"public class A {
        static String[] Lines = {""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9""};
        static int i = 0;

        private static String foo(String msg) {
                return msg+"": ""+ Lines[i++];
        }

        public static void main(String[] args) {
                String formatWarning = foo(""Format warning"");
                System.out.println(formatWarning);
                System.out.println(formatWarning);

        }
}","Extracting foo(""Format warning"") as local variable (enabling ""replace all occurrences"") would result in the following code. The resulting code is semantically different from the original code, which results in semantic errors.",behavior change,https://youtrack.jetbrains.com/issue/IDEA-355423/Introduce-Variable-refactoring-changes-the-behavior-of-the-program,pending
https://github.com/eclipse-jdt/eclipse.jdt.ui/issues/348,Eclipse,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Extract variable,"public class A {
        static String[] Lines = {""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9""};
        static int i = 0;

        private static String foo(String msg) {
                return msg+"": ""+ Lines[i++];
        }

        public static void main(String[] args) {
                System.out.println(foo(""Format warning""));
                System.out.println(foo(""Format warning""));

        }
}",-,"public class A {
        static String[] Lines = {""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9""};
        static int i = 0;

        private static String foo(String msg) {
                return msg+"": ""+ Lines[i++];
        }

        public static void main(String[] args) {
                String formatWarning = foo(""Format warning"");
                System.out.println(formatWarning);
                System.out.println(formatWarning);

        }
}","Extracting foo(""Format warning"") as local variable (enabling ""replace all occurrences"") would result in the following code. The resulting code is semantically different from the original code, which results in semantic errors.",behavior change,,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=572100,Eclipse,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Move Type to a New File,"
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.Map;

import static java.util.Collections.unmodifiableMap;
import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toMap;

public interface MyInterface {
    interface Layout /*permits Layout.PrimitiveLayout, Layout.ListLayout, Layout.StructLayout*/ {
        default boolean isPrimitive() {
            return this instanceof PrimitiveLayout;
        }
        default boolean isList() {
            return this instanceof ListLayout;
        }
        default boolean isStruct() {
            return this instanceof StructLayout;
        }
        boolean nullable();
        default Map<String, Layout> fields() {
            return Map.of();
        }
        default Layout field(String name) {
            throw new IllegalArgumentException(""unknown field "" + name);
        }
        default Layout element() {
            throw new IllegalArgumentException(""no element"");
        }

        static PrimitiveLayout u1(boolean nullable) {
            return new PrimitiveLayout(nullable, boolean.class);
        }
        static PrimitiveLayout byte8(boolean nullable) {
            return new PrimitiveLayout(nullable, byte.class);
        }
        static PrimitiveLayout short16(boolean nullable) {
            return new PrimitiveLayout(nullable, short.class);
        }
        static PrimitiveLayout char16(boolean nullable) {
            return new PrimitiveLayout(nullable, char.class);
        }
        static PrimitiveLayout int32(boolean nullable) {
            return new PrimitiveLayout(nullable, int.class);
        }
        static PrimitiveLayout float32(boolean nullable) {
            return new PrimitiveLayout(nullable, float.class);
        }
        static PrimitiveLayout double64(boolean nullable) {
            return new PrimitiveLayout(nullable, double.class);
        }
        static PrimitiveLayout long64(boolean nullable) {
            return new PrimitiveLayout(nullable, long.class);
        }

        static ListLayout list(boolean nullable, Layout layout) {
            return new ListLayout(nullable, layout);
        }
        static ListLayout string(boolean nullable) {
            return list(true, char16(nullable));
        }

        static Field field(String name, Layout layout) {
            return new Field(name, layout);
        }
        static StructLayout struct(boolean nullable, Field... fields) {
            return new StructLayout(nullable, Arrays.stream(fields).collect(toMap(Field::name, Field::layout, (_1, _2) -> null, LinkedHashMap::new)));
        }

        private static String toString(String space, Layout layout) {
            if (layout instanceof PrimitiveLayout primitiveLayout) {
                return primitiveLayout.toString();
            }
            if (layout instanceof ListLayout listLayout) {
                if (listLayout.element instanceof PrimitiveLayout elementLayout && elementLayout.type == char.class) {
                    return ""string("" + elementLayout.nullable + "")"";
                }
                return ""list("" + listLayout.nullable + "", "" + toString(space, listLayout.element);
            }
            if (layout instanceof StructLayout structLayout) {
                if (structLayout.fields.isEmpty()) {
                    return ""struct("" + structLayout.nullable + "")"";
                }
                var newSpace = space + ""   "";
                return structLayout.fields.entrySet().stream()
                        .map(e -> newSpace + ""field(\"""" + e.getKey() + ""\"", "" + toString(newSpace, e.getValue()) + "")"")
                        .collect(joining("",\n"", ""struct("" + structLayout.nullable + "",\n"", ""\n"" + space + "")""));
            }
            throw new AssertionError();
        }

        record PrimitiveLayout(boolean nullable, Class<?> type) implements Layout {
            public PrimitiveLayout {
                requireNonNull(type);
                if (!type.isPrimitive()) {
                    throw new IllegalArgumentException(""only primitive types are allowed"");
                }
            }

            @Override
            public String toString() {
                var name = switch(type.getName()) {
                    case ""boolean"" -> ""u1"";
                    case ""byte"" -> ""byte8"";
                    case ""short"" -> ""short16"";
                    case ""char"" -> ""char16"";
                    case ""int"" -> ""int32"";
                    case ""float"" -> ""float32"";
                    case ""long"" -> ""long64"";
                    case ""double"" -> ""double64"";
                    default -> throw new AssertionError();
                };
                return name + ""("" + nullable + "")"";
            }
        }
        record ListLayout(boolean nullable, Layout element) implements Layout {
            public ListLayout {
                requireNonNull(element);
            }

            @Override
            public String toString() {
                return Layout.toString("""", this);
            }
        }
        record StructLayout(boolean nullable, Map<String, Layout> fields) implements Layout {
            public StructLayout {
                fields = new LinkedHashMap<>(fields);
            }

            @Override
            public Layout field(String name) {
                var layout = fields.get(name);
                if (layout == null) {
                    throw new IllegalArgumentException(""unknown field "" + name);
                }
                return layout;
            }

            @Override
            public Map<String, Layout> fields() {
                return unmodifiableMap(fields);
            }

            @Override
            public String toString() {
                return Layout.toString("""", this);
            }
        }
        record Field(String name, Layout layout) {
            public Field {
                requireNonNull(name);
                requireNonNull(layout);
            }

            @Override
            public String toString() {
                return ""field("" + name + "", "" + layout + "")"";
            }
        }
    }
}",-,"import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.Map;

import static java.util.Collections.unmodifiableMap;
import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toMap;

public interface MyInterface {
}

import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 *
 * @author schw
 */
public interface Layout {

    default boolean isPrimitive() {
        return this instanceof PrimitiveLayout;
    }

    default boolean isList() {
        return this instanceof ListLayout;
    }

    default boolean isStruct() {
        return this instanceof StructLayout;
    }

    boolean nullable();

    default Map<String, Layout> fields() {
        return Map.of();
    }

    default Layout field(String name) {
        throw new IllegalArgumentException(""unknown field "" + name);
    }

    default Layout element() {
        throw new IllegalArgumentException(""no element"");
    }

    static PrimitiveLayout u1(boolean nullable) {
        return new PrimitiveLayout(nullable, boolean.class);
    }

    static PrimitiveLayout byte8(boolean nullable) {
        return new PrimitiveLayout(nullable, byte.class);
    }

    static PrimitiveLayout short16(boolean nullable) {
        return new PrimitiveLayout(nullable, short.class);
    }

    static PrimitiveLayout char16(boolean nullable) {
        return new PrimitiveLayout(nullable, char.class);
    }

    static PrimitiveLayout int32(boolean nullable) {
        return new PrimitiveLayout(nullable, int.class);
    }

    static PrimitiveLayout float32(boolean nullable) {
        return new PrimitiveLayout(nullable, float.class);
    }

    static PrimitiveLayout double64(boolean nullable) {
        return new PrimitiveLayout(nullable, double.class);
    }

    static PrimitiveLayout long64(boolean nullable) {
        return new PrimitiveLayout(nullable, long.class);
    }

    static ListLayout list(boolean nullable, Layout layout) {
        return new ListLayout(nullable, layout);
    }

    static ListLayout string(boolean nullable) {
        return list(true, char16(nullable));
    }

    static Field field(String name, Layout layout) {
        return new Field(name, layout);
    }

    static StructLayout struct(boolean nullable, Field... fields) {
        return new StructLayout(nullable, Arrays.stream(fields).collect(Collectors.toMap(Field::name, Field::layout, (_1, _2) -> null, LinkedHashMap::new)));
    }

    private static String toString(String space, Layout layout) {
        if (layout instanceof PrimitiveLayout primitiveLayout) {
            return primitiveLayout.toString();
        }
        if (layout instanceof ListLayout listLayout) {
            if (listLayout.element instanceof PrimitiveLayout elementLayout && elementLayout.type == char.class) {
                return ""string("" + elementLayout.nullable + "")"";
            }
            return ""list("" + listLayout.nullable + "", "" + toString(space, listLayout.element);
        }
        if (layout instanceof StructLayout structLayout) {
            if (structLayout.fields.isEmpty()) {
                return ""struct("" + structLayout.nullable + "")"";
            }
            java.lang.String newSpace = space + ""   "";
            return structLayout.fields.entrySet().stream().map(e -> newSpace + ""field(\"""" + e.getKey() + ""\"", "" + toString(newSpace, e.getValue()) + "")"").collect(Collectors.joining("",\n"", ""struct("" + structLayout.nullable + "",\n"", ""\n"" + space + "")""));
        }
        throw new AssertionError();
    }
    public static class PrimitiveLayout implements Layout {

        public PrimitiveLayout(boolean nullable, Class<?> type) {
            Objects.requireNonNull(type);
            if (!type.isPrimitive()) {
                throw new IllegalArgumentException(""only primitive types are allowed"");
            }
        }

        @Override
        public String toString() {
            java.lang.String name = switch (type.getName()) {
                case ""boolean"" -> yield ""u1"";
                case ""byte"" -> yield ""byte8"";
                case ""short"" -> yield ""short16"";
                case ""char"" -> yield ""char16"";
                case ""int"" -> yield ""int32"";
                case ""float"" -> yield ""float32"";
                case ""long"" -> yield ""long64"";
                case ""double"" -> yield ""double64"";
                default -> throw new AssertionError();
            };
            return name + ""("" + nullable + "")"";
        }
    }
    public static class ListLayout implements Layout {

        public ListLayout(boolean nullable, Layout element) {
            Objects.requireNonNull(element);
        }

        @Override
        public String toString() {
            return Layout.toString("""", this);
        }
    }
    public static class StructLayout implements Layout {

        public StructLayout(boolean nullable, Map<String, Layout> fields) {
            fields = new LinkedHashMap<>(fields);
        }

        @Override
        public Layout field(String name) {
            com.mycompany.mavenproject22.Layout layout = fields.get(name);
            if (layout == null) {
                throw new IllegalArgumentException(""unknown field "" + name);
            }
            return layout;
        }

        @Override
        public Map<String, Layout> fields() {
            return Collections.unmodifiableMap(fields);
        }

        @Override
        public String toString() {
            return Layout.toString("""", this);
        }
    }
    public static class Field {

        public Field(String name, Layout layout) {
            Objects.requireNonNull(name);
            Objects.requireNonNull(layout);
        }

        @Override
        public String toString() {
            return ""field("" + name + "", "" + layout + "")"";
        }
    }
    
}","Use the code below and try to do a refactor move to upper level on ""Layout"",
it generates a CCE.
It seems due to the interface Layout being implemented by record.",compile error,,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=573624,Eclipse,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Rename Method,"public record User(int comp) {


    private void method1() {
    }

    private void method() {
        int a = comp;
        this.comp();  //refactor comp to qq

    }

}",-,Exception,refactor comp to qq,Exception,,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=564684,Eclipse,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Move Type to a New File,"public record User(User.Bar bar) {
    public record Bar(int i) {}

}",-,"public record User(User.Bar bar) {

    public User(Bar bar) {
    }

}
public class Bar {
}
",Trying to move the type Bar to upper level,compile error,,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=497368,Eclipse,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Pull up,"public interface MyInterface {

}
import java.text.MessageFormat;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.LogManager;

public class A implements MyInterface{
    public void log(Level level, String message, String... parameters) {
        String formattedMessage = MessageFormat.format(message, (Object[])parameters);
        System.out.println(""Logging ""+message+"" with ""+ Arrays.asList(parameters));
        LogManager.getLogManager().getLogger(Foo.class.getName()).log(level, formattedMessage);
    }
}
public class B implements MyInterface {

}",-,"public interface MyInterface {

    void log(Level level, String message, String... parameters);

}
import java.text.MessageFormat;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.LogManager;

public class A implements MyInterface{
    public void log(Level level, String message, String... parameters) {
        String formattedMessage = MessageFormat.format(message, (Object[])parameters);
        System.out.println(""Logging ""+message+"" with ""+ Arrays.asList(parameters));
        LogManager.getLogManager().getLogger(Foo.class.getName()).log(level, formattedMessage);
    }
}
public class B implements MyInterface {

}",Use the Pull Up refactoring to pull the method up into interface,compile error,,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=444354,Eclipse,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Pull up,"public class A{
    interface Foo {
    }

    static class Bar implements Foo {

        /** baz it! */
        void baz(final String s) {
        }
    }
}
import java.util.List;

public class B implements A.Foo{
    public void b() {
        List<Object> l = null;
    }
}",-,"public class A{
    interface Foo {

        void b();
    }

    static class Bar implements Foo {

        /** baz it! */
        void baz(final String s) {
        }
    }
}
import java.util.List;

public class B implements A.Foo{
    public void b() {
        List<Object> l = null;
    }
}",Pull up the method B.b() to A.Foo.,compile error,,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=125326,Eclipse,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Pull up,"public abstract class A{

}
public abstract class B extends A{
    abstract void m();
}
public class C extends A{

}",-,"public abstract class A{

    abstract void m();

}
public abstract class B extends A{
}
public class C extends A{

}",Pull Up m() to A,compile error,,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=295200,Eclipse,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Inline Variable,"public class A{
    public void testIt() {
        // blah
        String test = """";
        System.out.println(test);
    }
}",-,"public class A{
    public void testIt() {
        System.out.println( // blah
        """");
    }
}",inline variable test,redundant change,,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=138320,Eclipse,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Rename method,"public class A{
    void abc() {}
    void ref() {
        abc();
    }
}","public class A{
    void abc() {
        qqq();
    }

    void qqq() {}
    void ref() {
        abc();
    }
}","public class A{
    void qqq() {
        abc();
    }

    void qqq() {
    }
    void ref() {
        abc();
    }
}",Change signature of abc() to qqq(): change name & have delegate checkboxes checked,compile error,,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=111056,Eclipse,IDEA,"IntelliJ IDEA 2024.1.2 (Ultimate Edition
Build #IU-241.17011.79, built on May 22, 2024
untime version: 17.0.11+1-b1207.24 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.","Java(TM) SE Runtime Environment (build 22.0.1+8-16)
Java HotSpot(TM) 64-Bit Server VM (build 22.0.1+8-16, mixed mode, sharing)",Move Type to New File,"public class A {
    static class Inner {
        String a;
    }
}
public class B {
    Object o= new A.Inner().a;
}",-,-,"Move Inner into a class in a different package. Both the class Inner and the
field a should have their visibility adjusted.",compile error,https://youtrack.jetbrains.com/issue/IDEA-355273/Move-inner-class-to-different-package-refactoring-result-in-syntax-error,pending
https://bugs.eclipse.org/bugs/show_bug.cgi?id=97209,Eclipse,IDEA,"IntelliJ IDEA 2024.1.2 (Ultimate Edition
Build #IU-241.17011.79, built on May 22, 2024
untime version: 17.0.11+1-b1207.24 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.","Java(TM) SE Runtime Environment (build 22.0.1+8-16)
Java HotSpot(TM) 64-Bit Server VM (build 22.0.1+8-16, mixed mode, sharing)",Pull up method,"public class A<ELEM extends Number> {
    void add(ELEM e) {

    }

    ELEM get() {

        return null;

    }
}
public class B<ELEM> extends A<Integer>{
    void sub(Integer i) {
        add(i);
    }
}",-,"public class A<ELEM extends Number> {
    void add(ELEM e) {

    }

    ELEM get() {

        return null;

    }

    void sub(Integer i) {
        add(i);
    }
}
public class B<ELEM> extends A<Integer>{
}",pull up sub from B to A,compile error,https://youtrack.jetbrains.com/issue/IDEA-355272/Pull-Members-Up-refactoring-for-the-classes-using-generic-types-producing-uncompilable-program,pending
https://bugs.eclipse.org/bugs/show_bug.cgi?id=95145,Eclipse,IDEA,"IntelliJ IDEA 2024.1.2 (Ultimate Edition
Build #IU-241.17011.79, built on May 22, 2024
untime version: 17.0.11+1-b1207.24 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.","Java(TM) SE Runtime Environment (build 22.0.1+8-16)
Java HotSpot(TM) 64-Bit Server VM (build 22.0.1+8-16, mixed mode, sharing)",Move Type to New File,"public class A<T> {
    class Inner {
        T foo;
    }

    T foo() {
        Inner inner = new Inner();
        return inner.foo;
    }
}",-,-,Move Inner to a new file.  The resulting code does not compile,compile error,https://youtrack.jetbrains.com/issue/IDEA-355271/Move-Inner-Class-to-Upper-Level-refactoring-fails-for-inner-class-using-generic-type,pending
https://bugs.eclipse.org/bugs/show_bug.cgi?id=95145,Eclipse,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Move Type to New File,"public class A<T> {
    class Inner {
        T foo;
    }

    T foo() {
        Inner inner = new Inner();
        return inner.foo;
    }
}",-,-,Move Inner to a new file.  The resulting code does not compile,compile error,,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=63519,Eclipse,IDEA,"IntelliJ IDEA 2024.1.2 (Ultimate Edition
Build #IU-241.17011.79, built on May 22, 2024
untime version: 17.0.11+1-b1207.24 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.","Java(TM) SE Runtime Environment (build 22.0.1+8-16)
Java HotSpot(TM) 64-Bit Server VM (build 22.0.1+8-16, mixed mode, sharing)",Move Type to New File,"package org.example;

public abstract class A {
    public int i;
    protected class Inner {
        void go() {
            i = 1;
        }
    }
    public abstract void go(Inner param);
}
package org.example.selfAnno;

import org.example.A;

public class B extends A {
    public void go(Inner param) {}
}",-,-,extracting Inner to a new file (with default settings) produces non-building,compile error,https://youtrack.jetbrains.com/issue/IDEA-355200/Move-Inner-Class-to-Upper-Level-refactoring-produces-uncompilable-program-for-classes-in-different-package,pending
https://bugs.eclipse.org/bugs/show_bug.cgi?id=63519,Eclipse,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Move Type to New File,"package org.example;

public abstract class A {
    public int i;
    protected class Inner {
        void go() {
            i = 1;
        }
    }
    public abstract void go(Inner param);
}
package org.example.selfAnno;

import org.example.A;

public class B extends A {
    public void go(Inner param) {}
}",-,-,extracting Inner to a new file (with default settings) produces non-building,compile error,,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=566881,Eclipse,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 22.0.1; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 11 version 10.0 running on amd64; UTF-8; en_CA (nb)",Oracle OpenJDK 17.0.8,introduce method / extract method,"class X {
        private void foo(Object o) {
            if (o instanceof X x) { // select the entire o instanceof X x
                System.out.println(x.toString());
                x.foo(null);
            }

        }
    }",-,"class X {
        private void foo(Object o) {
                if (extract1(o)) { // select the entire o instanceof X x
                        System.out.println(x.toString());
                        x.foo(null);
                }

        }

        private boolean extract1(Object o) {
            return o instanceof X x;
        }
    }","Select “o instanceof X x”
Refactor -> Introduce -> Method",compile error,,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=406786,Eclipse,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 22.0.1; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 11 version 10.0 running on amd64; UTF-8; en_CA (nb)",Oracle OpenJDK 17.0.8,introduce method / extract method,"public interface I1 {
        int foo(int a);
}

interface I2 {
        I1 i1= (a) -> {
                int b= 10; 
                return a + b;
        };
}","    public interface I1 {
        int foo(int a);
    }

    interface I2 {
        I1 i1 = (a) -> {
            int b = getB();
            return a + b;
        };

        private static int getB() {
            int b = 10; 
            return b;
        }
    }","a warning: ""Invalid Selection.""","Select ""int b= 10; ""
Refactor -> Introduce -> Method",incomplete refactoring,,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=97478,Eclipse,NetBeans,"Product Version: Apache NetBeans IDE 22
Java: 22.0.1; Java HotSpot(TM) 64-Bit Server VM 22.0.1+8-16
Runtime: Java(TM) SE Runtime Environment 22.0.1+8-16
System: Windows 11 version 10.0 running on amd64; UTF-8; en_CA (nb)",Oracle OpenJDK 22.0.0,introduce method / extract method,"private <T> int foo(List<T> list) {
                return list.size();
        }","private <T> int foo(List<T> list) {
        return getSize(list);
    }

    private static <T> int getSize(List<T> list) {
        return list.size();
    }","private <T> int foo(List<T> list) {
                return extract1(list);
    }

    private static int extract1(List<T> list) {
        return list.size();
    }","Select ""list.size()""
Refactor -> Introduce -> Method",compile error,,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=81178,Eclipse,IDEA,"IntelliJ IDEA 2024.1.2 (Ultimate Edition)
Build #IU-241.17011.79, built on May 22, 2024
Runtime version: 17.0.11+1-b1207.24 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.

",Oracle OpenJDK 22.0.0,Extract / Introduce Method,"private void foo(int e) {
        switch (e) {
            case 1:
                break;
        }
    }",should be disable,"private void foo(int e) {
        switch (e) {
            case getAnInt():
                break;
        }
    }

    private static int getAnInt() {
        return 1;
    }","select ""1"" after ""case""
Refactor -> Extract / Introduce -> Method",compile error,,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=81178,Eclipse,NetBeans,"Product Version: Apache NetBeans IDE 22
Java: 22.0.1; Java HotSpot(TM) 64-Bit Server VM 22.0.1+8-16
Runtime: Java(TM) SE Runtime Environment 22.0.1+8-16
System: Windows 11 version 10.0 running on amd64; UTF-8; en_CA (nb)",Oracle OpenJDK 22.0.0,Introduce Method,"private void foo(int e) {
        switch (e) {
            case 1:
                break;
        }
    }",should be disable,"private void foo(int e) {
        switch (e) {
            case getAnInt():
                break;
        }
    }

    private static int getAnInt() {
        return 1;
    }","select ""1"" after ""case""
Refactor -> Extract / Introduce -> Method",compile error,,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=566884,Eclipse,NetBeans,"Product Version: Apache NetBeans IDE 22
Java: 22.0.1; Java HotSpot(TM) 64-Bit Server VM 22.0.1+8-16
Runtime: Java(TM) SE Runtime Environment 22.0.1+8-16
System: Windows 11 version 10.0 running on amd64; UTF-8; en_CA (nb)",Oracle OpenJDK 22.0.0,Introduce Variable,"class X {
        private void foo(Object o) {
                if (o instanceof X x) { // select the entire o instanceof X x
                        System.out.println(x.toString());
                        x.foo(null);
                }

        }
}",should be disable,"class X {
        private void foo(Object o) {
            final boolean name = o instanceof X x;
                if (name) { // select the entire o instanceof X x
                        System.out.println(x.toString());
                        x.foo(null);
                }

        }
    }","Select “o instanceof X x” 
Refactor -> Introduce -> Variable",compile error,,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=377288,Eclipse,NetBeans,"Product Version: Apache NetBeans IDE 22
Java: 22.0.1; Java HotSpot(TM) 64-Bit Server VM 22.0.1+8-16
Runtime: Java(TM) SE Runtime Environment 22.0.1+8-16
System: Windows 11 version 10.0 running on amd64; UTF-8; en_CA (nb)",Oracle OpenJDK 22.0.0,Introduce Variable,"public void x(int i) {
        switch (i) {
            case 0:
            case 1:
        }
    }","public void x(int i) {
        final int i1 = 0;
        switch (i) {
            case i1:
            case 1:
        }
    }",no changes,"Select “0” 
Refactor -> Introduce -> Variable",incomplete refactoring,,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=48231,Eclipse,NetBeans,"Product Version: Apache NetBeans IDE 22
Java: 22.0.1; Java HotSpot(TM) 64-Bit Server VM 22.0.1+8-16
Runtime: Java(TM) SE Runtime Environment 22.0.1+8-16
System: Windows 11 version 10.0 running on amd64; UTF-8; en_CA (nb)",Oracle OpenJDK 22.0.0,Introduce Variable,"public void testFoo() {
                int a[]= new int[20];
                
                for (int i= 0; i < a.length; i++) 
                        System.out.println(a[i]);
        }","    public void testFoo() {
        int a[]= new int[20];

        for (int i= 0; i < a.length; i++) {
            int j = a[i];
            System.out.println(j);
        }
    }","public void testFoo() {
	int a[]= new int[20];
        final int j = a[i];
		
	for (int i= 0; i < a.length; i++) 
            System.out.println(j);
    }","Select “a[i]” 
Refactor -> Introduce -> Variable",behavior change,,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=122389,Eclipse,IDEA,"IntelliJ IDEA 2024.1.2 (Ultimate Edition)
Build #IU-241.17011.79, built on May 22, 2024
Runtime version: 17.0.11+1-b1207.24 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.

",Oracle OpenJDK 22.0.0,Extract / Introduce Method,"private int getGridY(int y) {
        int tmp = 0, res = 1;
        while (res < y) {
        	//extract here
            tmp = res;
            res += 1;
            //to here
        }
        return tmp;
    }
    
    public void testCase(){    	
    	assertEquals(getGridY(7),6);
    }","should be disable
NetBeans will warn that ""Too many return values"" and refuse to do refactoring","private int getGridY(int y) {
        int tmp = 0, res = 1;
        while (res < y) {
            //extract here
            tmp = res;
            res += 1;
            //to here
            Result result = new Result(tmp, res);
        }
        return result.tmp();
    }

    private record Result(int tmp, int res) {
    }

    public void testCase(){
        System.out.println(getGridY(7));
    }","Select “//extract here
            tmp = res;
            res += 1;
            //to here” 
Refactor -> Introduce -> Variable",compile error,,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=416198,Eclipse,IDEA,"IntelliJ IDEA 2024.1.2 (Ultimate Edition)
Build #IU-241.17011.79, built on May 22, 2024
Runtime version: 17.0.11+1-b1207.24 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.

",Oracle OpenJDK 22.0.1,Inline method,"public class A {
        public static int i;

        public static int getI() {         // APPLY INLINE HERE
                return i;
        }
}

public enum B {
        m(A.getI());
        
        B(int j){                
        }
}","public class A {
    public static int i;
    
}
public enum B {
    m(A.i);

    B(int j){
    }
}",Cannot perform refactoring,"Select “getI()” in class A from left to right
Refactor ->  Inline Method -> Error ""Caret should be positioned at the name of element to be refactored""
However, if you select ""getI()"" from right to left, the error won't appear. The refactoring can continue with ""Inline all and remove the method""",incomplete refactoring,,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=416198,Eclipse,NetBeans,"Product Version: Apache NetBeans IDE 22
Java: 22.0.1; Java HotSpot(TM) 64-Bit Server VM 22.0.1+8-16
Runtime: Java(TM) SE Runtime Environment 22.0.1+8-16
System: Windows 11 version 10.0 running on amd64; UTF-8; en_CA (nb)",Oracle OpenJDK 22.0.0,Inline method,"public class A {
        public static int i;

        public static int getI() {         // APPLY INLINE HERE
                return i;
        }
}

public enum B {
        m(A.getI());
        
        B(int j){                
        }
}","public class A {
    public static int i;
    
}
public enum B {
    m(A.i);

    B(int j){
    }
}",NPE,"Select “getI()” in class A
Refactor -> Inline...",incomplete refactoring,,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=44419,Eclipse,NetBeans,"Product Version: Apache NetBeans IDE 22
Java: 22.0.1; Java HotSpot(TM) 64-Bit Server VM 22.0.1+8-16
Runtime: Java(TM) SE Runtime Environment 22.0.1+8-16
System: Windows 11 version 10.0 running on amd64; UTF-8; en_CA (nb)",Oracle OpenJDK 22.0.0,Inline method,"void example(int i){
        if(!isString(i)){
            return;
        }
    }
    boolean isString(Object o) {
        return o instanceof String;
    }","void example(int i){
        if(!((Object) i instanceof String)){
            return;
        }
    }","void example(int i){
        if(!(i instanceof String)){
            return;
        }
    }","Select “isString(Object o)” 
Refactor -> Inline... ->Do Refactoring",compile error,,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=50139,Eclipse,IDEA,"IntelliJ IDEA 2024.1.2 (Ultimate Edition)
Build #IU-241.17011.79, built on May 22, 2024
Runtime version: 17.0.11+1-b1207.24 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.

",Oracle OpenJDK 22.0.1,Inline Method,"public class Main {
    public static final String ID= ""id"";

    public static String getId() {
        return ID;
    }

}

--

public class Dependent {
    public void m() {
        String s= Main.getId();
    }
}","public class Main {
    public static final String ID= ""id"";
}

--

public class Dependent {
    public void m() {
        String s= Main.ID;
    }
}",Cannot perform refactoring,"Select “getId()"" in “Main.getId()” from left to right
Refactor -> Inline Method -> Error ""Caret should be positioned at the name of element to be refactored""
However, if you select ""getId()"" from right to left, the error won't appear",incorrect warning message,,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=123356,Eclipse,NetBeans,"Product Version: Apache NetBeans IDE 22
Java: 22.0.1; Java HotSpot(TM) 64-Bit Server VM 22.0.1+8-16
Runtime: Java(TM) SE Runtime Environment 22.0.1+8-16
System: Windows 11 version 10.0 running on amd64; UTF-8; en_CA (nb)",Oracle OpenJDK 22.0.0,Inline method,"public class Bug {
    static String[]field;
    public static void main(String[]args){
        add((field=args).length,field.hashCode());
    }
    static int add(int x, int y){
        return y+x;
    }
}","public class Bug {

    static String[]field;
    public static void main(String[]args){
        field = args;
        field.hashCode();
    }
}","public class Bug {
    static String[]field;
    public static void main(String[]args){
    }
    
}","Select “add(int x, int y)” 
Refactor -> Inline Method -> Inline all and remove the method",behavior change,,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=92519,Eclipse,IDEA,"IntelliJ IDEA 2024.1.2 (Ultimate Edition)
Build #IU-241.17011.79, built on May 22, 2024
Runtime version: 17.0.11+1-b1207.24 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.

",Oracle OpenJDK 22.0.1,Inline Method,"public class InlineMethodBug {
    private Object data;

    InlineMethodBug(Object data){
                this.setData(data);
    }

    //inline this method, remove decl
        private void setData(Object bytes) {
                this.data= bytes;
        }
}","private Object data;

    InlineMethodBug(Object data){
        this.data= data;
    }

    //inline this method, remove decl",Cannot perform refactoring,"Select “setData(data)” from left to right
Refactor -> Inline method
However, if you select ""setData(data)"" from right to left, the error won't appear",incorrect warning message,,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=411529,Eclipse,NetBeans,"Product Version: Apache NetBeans IDE 22
Java: 22.0.1; Java HotSpot(TM) 64-Bit Server VM 22.0.1+8-16
Runtime: Java(TM) SE Runtime Environment 22.0.1+8-16
System: Windows 11 version 10.0 running on amd64; UTF-8; en_CA (nb)",Oracle OpenJDK 22.0.0,move method,"package p;
public class A {
        protected void m(){}
}


package p;
public class B {
        public void n(q.C c, A a) {
                a.m();
        }
}

package q;
public class C {

}","should prevent or give warning like IntelliJ ""Method A.m() is protected and will not be accessible from method n(C, A)."" or change the visibility of m() in class A","package p;
public class A {
        protected void m(){}
}


package p;
public class B {
}

package q;
public class C {
        public void n(A a) {
                a.m();
        }
}","Select “n(q.C c, A a)” in B1
Refactor -> Move...",compile error,,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=108030,Eclipse,NetBeans,"Product Version: Apache NetBeans IDE 22
Java: 22.0.1; Java HotSpot(TM) 64-Bit Server VM 22.0.1+8-16
Runtime: Java(TM) SE Runtime Environment 22.0.1+8-16
System: Windows 11 version 10.0 running on amd64; UTF-8; en_CA (nb)",Oracle OpenJDK 22.0.0,move method,"class A {
    B fB;
    
    public void doit(String doitArg) {
        subroutine(1.2f);
    }
    
    public void subroutine(float subArg) {
        subsub();
    }

    public void subsub() {
        
    }
    
}

class B {
    
}","public class A {
    B fB;

    public void subsub() {

    }
}
public class B{

    public void doit(String doitArg, A a) {
        a.fB.subroutine(1.2f, a);
    }

    public void subroutine(float subArg, A a) {
        a.subsub();
    }
}","public class A {
    B fB;
    
    

    public void subsub() {
        
    }
}
public class B {

    public void doit(String doitArg, A a) {
        subroutine(1.2F);
    }

    public void subroutine(float subArg, A a) {
        a.subsub();
    }
    
}
","- move doit(..) to B
  -> compiles
- move subroutine(..) to B
  -> does not compile ",compile error,,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=107998,Eclipse,IDEA,"IntelliJ IDEA 2024.1.2 (Ultimate Edition)
Build #IU-241.17011.79, built on May 22, 2024
Runtime version: 17.0.11+1-b1207.24 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.

",Oracle OpenJDK 22.0.1,move method,"public class Bug {
    public static int field;
    class Inner{
        int number=field;
        int method(){return field;}
    }
}","public class Bug {
    public static int field;
    int method(){return field;}
    class Inner{
        int number=field;
    }
}","Error: Cannot perform refactoring.
There are no method parameters or containing class field that have reference type","Select “method” 
Refactor -> Move Instant Method...",incorrect warning message,,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=107998,Eclipse,IDEA,"IntelliJ IDEA 2024.1.2 (Ultimate Edition)
Build #IU-241.17011.79, built on May 22, 2024
Runtime version: 17.0.11+1-b1207.24 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.

",Oracle OpenJDK 22.0.1,move field,"public class Bug {
    public static int field;
    class Inner{
        int number=field;
        int method(){return field;}
    }
}","public class Bug {
    public static int field;
    int number=field;
    class Inner{
        int method(){return field;}
    }
}",didn't offer move field option,"Select “number""
Refactor -> ",incomplete refactoring,,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=96172,Eclipse,NetBeans,"Product Version: Apache NetBeans IDE 22
Java: 22.0.1; Java HotSpot(TM) 64-Bit Server VM 22.0.1+8-16
Runtime: Java(TM) SE Runtime Environment 22.0.1+8-16
System: Windows 11 version 10.0 running on amd64; UTF-8; en_CA (nb)",Oracle OpenJDK 22.0.0,move method,"
import static java.lang.Integer.*;
public class Source { static int getInt () { return parseInt(""""); } }
-------
public class Target {}","public class Source {}
-------
import static java.lang.Integer.*;
public class Target { static int getInt () { return parseInt(""""); } }","import static java.lang.Integer.*;
public class Source {}
-------
public class Target { static int getInt () { return parseInt(""""); } }","Select “getInt ()""
Refactor -> Move ...","compile error, missing static import",,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=567438,Eclipse,IDEA,"IntelliJ IDEA 2024.1.2 (Ultimate Edition)
Build #IU-241.17011.79, built on May 22, 2024
Runtime version: 17.0.11+1-b1207.24 amd64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.

",Oracle OpenJDK 22.0.1,Change Method Signature,"public static void main(String[] args) {
                System.out.println(args[0]);
                                
        }",Warning: Old parameter values of type java.lang.String[] can not be assigned to String. The sources may not compile after refactoring!,"public static void main(String args) {
        System.out.println(args[0]);

    }","Select “String[] args""
Refactor -> Change Signature... -> change ""String[]"" to ""String""",compile error,,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=137363,Eclipse,NetBeans,"Product Version: Apache NetBeans IDE 22
Java: 22.0.1; Java HotSpot(TM) 64-Bit Server VM 22.0.1+8-16
Runtime: Java(TM) SE Runtime Environment 22.0.1+8-16
System: Windows 11 version 10.0 running on amd64; UTF-8; en_CA (nb)",Oracle OpenJDK 22.0.0,Change Method Parameter,"public class A {
    public void testThis() {
        System.out.println(""method1"");
    }
}
public class B extends A{
    @Override
    public void testThis() {
        System.out.println(""method2"");
    }
}","give warning to prevent this refactoring. IntelliJ doesn't provide ""change visibility"" option in this case","public class A {
    private void testThis() {
        System.out.println(""method1"");
    }
}
public class B extends A{
    @Override
    private void testThis() {
        System.out.println(""method2"");
    }
}","Select “testThis()"" in class B
Refactor -> Change Method Parameter -> change access to ""private""","compile error, ""method does not override or implement a method from a super type""",,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=88806,Eclipse,NetBeans,"Product Version: Apache NetBeans IDE 22
Java: 22.0.1; Java HotSpot(TM) 64-Bit Server VM 22.0.1+8-16
Runtime: Java(TM) SE Runtime Environment 22.0.1+8-16
System: Windows 11 version 10.0 running on amd64; UTF-8; en_CA (nb)",Oracle OpenJDK 22.0.0,Change Method Parameter,"public void packetReceived(
        final RoutedPacket pkt,
        final PktNodeInfo fromNode,
        final PktNodeInfo toNode,
        final BitVector/*64*/sendTime,
        final BitVector/*64*/recvTime)","public void packetReceived(
            final RoutedPacket pkt,
            final PktNodeInfo fromNode,
            final PktNodeInfo toNode,
            final long/*64*/sendTime,
            final long/*64*/recvTime){}","public void packetReceived(
        final RoutedPacket pkt, final PktNodeInfo fromNode, final PktNodeInfo toNode, final long sendTime, final long recvTime){}
    /*64*/
    /*64*/","Select “packetReceived"" 
Refactor -> Change Method Parameter -> change ""BitVector"" to ""long""",comment related,,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=95121,Eclipse,NetBeans,"Product Version: Apache NetBeans IDE 22
Java: 22.0.1; Java HotSpot(TM) 64-Bit Server VM 22.0.1+8-16
Runtime: Java(TM) SE Runtime Environment 22.0.1+8-16
System: Windows 11 version 10.0 running on amd64; UTF-8; en_CA (nb)",Oracle OpenJDK 22.0.0,Change Method Parameter,"import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;


@Retention(RetentionPolicy.RUNTIME)
public @interface IsTest {
	String setUp() default """";
	String tearDown() default """";
}","import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;


@Retention(RetentionPolicy.RUNTIME)
public @interface IsTest {
	String setUp1() default """";
	String tearDown() default """";
}",Error: @interface members may not have parameters,"Select “setUp()"" 
Refactor -> Change Method Parameter ",incomplete refactoring,,
https://youtrack.jetbrains.com/issue/IDEA-96962/Inline-method-to-super-constructor-call-break-code,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,inline method,"class A{
    void bar() {}
}
public class B extends A {
    void foo() {
        super.bar();
    }

    static void err(B b) {
        b.foo(); //inline call to foo()
    }
}",warning message,"public class B extends A {

    static void err(B b) {
        super.bar(); 
    }
}",inline method refactoring on b.foo(),compile error,,
https://youtrack.jetbrains.com/issue/IDEA-142361/Extract-Variable-in-lambda-expression-fails,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Introduc Variable,"public class A {
    public void doTest() {
        String text = ""xxx"";
        Runnable runnable = () -> A.this.toVoid(text.length() - 1);
    }

    private void toVoid(Object o) {
    }
}","public class A {
    public void doTest() {
        String text = ""xxx"";
        Runnable runnable = () -> {
                        int o = text.length() - 1;
                        A.this.toVoid(o);
                };
    }

    private void toVoid(Object o) {
    }
}","public class A {
    public void doTest() {
        String text = ""xxx"";
        Runnable runnable = () -> A.this.toVoid(name);
    }

    private void toVoid(Object o) {
    }
}","extracting variable for ""text.length() - 1""",compile error,duplicated with 27,
https://youtrack.jetbrains.com/issue/IDEA-151440/No-Move-Members-refactoring-warning-when-move-will-hide-existing-member,IDEA,NetBeans,"Product Version: Apache NetBeans IDE 21
Java: 17.0.8; Java HotSpot(TM) 64-Bit Server VM 17.0.8+9-LTS-211
Runtime: Java(TM) SE Runtime Environment 17.0.8+9-LTS-211
System: Windows 10 version 10.0 running on amd64; Cp1252; en_US (nb)",Oracle OpenJDK 22.0.1,Move Method,"public class A {
    static boolean truth = true;
    static void important() {
        System.out.println(1);
    }
}
public class B extends A{
    B() {
        important();
        System.out.println(truth);
    }
}
public class C{
    static boolean truth = false;
    static void important() {
        System.out.println(2);
    }
}",warning message,"public class A {
    static boolean truth = true;
    static void important() {
        System.out.println(1);
    }
}
public class B extends A{
    static boolean truth = false;

	B() {
        important();
        System.out.println(truth);
    }

	static void important() {
	    System.out.println(2);
	}
}
public class C{
}",move refactoring for important() and truth in class C to B,behavior change,pair with line 34,